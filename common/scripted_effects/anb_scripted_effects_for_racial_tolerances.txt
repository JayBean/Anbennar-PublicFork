
# These are the effects used to lower/increase different tolerances
# These are here to make it easier for the devs to mod events (also allows smaller adjustment of event effects)
# All of these either increase or decrease the current tolerance by 5, 10, 15 or 20.

reset_racial_military_via_administration = {
	if = {
		limit = {
			has_country_modifier = orcish_administration
		}
		add_country_modifier = {
			name = restructuring_military
			duration = 3650
		}
		add_country_modifier = {
			name = orcish_military
			duration = -1
		}
		if = {
			limit = {
				OR = {
					capital_scope = {
						continent = serpentspine
					}
					primary_culture = black_orc
					AND = {
						accepted_culture = black_orc
						NOT = { culture_group = orcish }
					}
				}
			}
			change_unit_type = tech_black_orcish
		}
		else_if = {
			limit = {
				OR = {
					capital_scope = {
						continent = asia
						NOT = { superregion = forbidden_lands_superregion }
					}
					primary_culture = brown_orc
					AND = {
						accepted_culture = brown_orc
						NOT = { culture_group = orcish }
					}
				}
			}
			change_unit_type = tech_east_orcish
		}
		else = {
			change_unit_type = tech_orcish
		}
	}
	else_if = {
		limit = {
			has_country_modifier = human_administration
		}
		add_country_modifier = {
			name = restructuring_military
			duration = 3650
		}
		add_country_modifier = {
			name = human_military
			duration = -1
		}
		if = {
			limit = {
				capital_scope = { superregion = bulwar_superregion }
			}
			change_unit_type = tech_bulwari
		}
		else_if = {
			limit = {
				capital_scope = { superregion = north_salahad_superregion }
			}
			change_unit_type = tech_salahadesi
		}
		else_if = {
			limit = {
				capital_scope = { superregion = south_salahad_superregion }
			}
			change_unit_type = tech_salahadesi
		}
		else_if = {
			limit = {
				capital_scope = { superregion = west_sarhal_superregion }
			}
			change_unit_type = tech_west_sarhaly
		}
		else_if = {
			limit = {
				capital_scope = { superregion = east_sarhal_superregion }
			}
			if = {
				limit = { 
					OR = {
						accepted_culture = tanizu
						accepted_culture = dakinshi
						accepted_culture = antmvura
					}
					NOT = { culture_group = tanizu }
				}
				change_unit_type = tech_tanizu
			}
			else = { change_unit_type = tech_east_sarhaly }
		}
		else_if = {
			limit = {
				capital_scope = { superregion = south_sarhal_superregion }
			}
			if = {
				limit = { 
					OR = {
						accepted_culture = suhratbi
						accepted_culture = dhebiji
						accepted_culture = guryadagga
						accepted_culture = ashamadi
					}
					NOT = { culture_group = baashidi }
				}
				change_unit_type = tech_baashidi
			}
			else = { change_unit_type = tech_south_sarhaly }
		}
		else_if = {
			limit = {
				capital_scope = { superregion = rahen_superregion }
			}
			change_unit_type = tech_raheni
		}
		else_if = {
			limit = {
				OR = {
					capital_scope = { superregion = yanshen_superregion }
					capital_scope = { superregion = south_haless_superregion }
				}
			}
			change_unit_type = tech_halessi
		}
		else_if = {
			limit = {
				capital_scope = { superregion = north_haless_superregion }
			}
			change_unit_type = tech_shuvuush
		}
		else_if = {
			limit = {
				capital_scope = { superregion = forbidden_lands_superregion }
			}
			change_unit_type = tech_triunic
		}
		else_if = {
			limit = {
				capital_scope = { superregion = gerudia_superregion }
			}
			change_unit_type = tech_gerudian
		}
		else_if = {
			limit = {
				OR = {
					capital_scope = { superregion = broken_lands_superregion }
					capital_scope = { superregion = eordand_superregion }
					capital_scope = { superregion = ynn_superregion }
				}
			}
			change_unit_type = tech_ynnsmen
		}
		else = {
			change_unit_type = tech_cannorian
		}
	}
	else_if = {
		limit = {
			has_country_modifier = elven_administration
		}
		add_country_modifier = {
			name = restructuring_military
			duration = 3650
		}
		add_country_modifier = {
			name = elven_military
			duration = -1
		}
		if = { limit = { NOT = { has_dlc = "Cradle of Civilization" } }
			add_country_modifier = { 
				name = elven_military_no_dlc
				duration = -1  
			}
		}
		if = {
			limit = {
				OR = {
					capital_scope = { superregion = deepwoods_superregion }
					primary_culture = wood_elf
					AND = {
						accepted_culture = wood_elf
						NOT = { culture_group = elven }
					}
				}
			}
			change_unit_type = tech_wood_elf
		}
		else_if = {
			limit = {
				OR = {
					capital_scope = { continent = asia }
					capital_scope = { continent = africa }
					AND = {
						OR = {
							capital_scope = { continent = north_america }
							capital_scope = { continent = south_america }
						}
						religion_group = bulwari
					}
					primary_culture = sun_elf
					primary_culture = dawn_elf
					primary_culture = desert_elf
					primary_culture = sunrise_elf
					AND = {
						accepted_culture = sun_elf
						NOT = { culture_group = elven }
					}
					AND = {
						accepted_culture = dawn_elf
						NOT = { culture_group = elven }
					}
					AND = {
						accepted_culture = desert_elf
						NOT = { culture_group = elven }
					}
					AND = {
						accepted_culture = sunrise_elf
						NOT = { culture_group = elven }
					}
				}
			}
			change_unit_type = tech_east_elven
		}
		else = {
			change_unit_type = tech_elven
		}
	}
	else_if = {
		limit = {
			has_country_modifier = half_elven_administration
		}
		add_country_modifier = {
			name = restructuring_military
			duration = 3650
		}
		add_country_modifier = {
			name = half_elven_military
			duration = -1
		}
		change_unit_type = tech_cannorian
	}

	else_if = {
		limit = {
			has_country_modifier = half_orcish_administration
		}
		add_country_modifier = {
			name = restructuring_military
			duration = 3650
		}
		add_country_modifier = {
			name = half_orcish_military
			duration = -1
		}
		if = {
			limit = {
				OR = {
					capital_scope = { superregion = gerudia_superregion }
					primary_culture = grombar_half_orc
					primary_culture = grombar_orc
					primary_culture = gray_orc
					AND = {
						accepted_culture = grombar_half_orc
						NOT = { culture_is_half_orcish = yes }
					}
					AND = {
						accepted_culture = grombar_orc
						NOT = { culture_is_half_orcish = yes }
					}
					AND = {
						accepted_culture = gray_orc
						NOT = { culture_is_half_orcish = yes }
					}
				}
			}
			change_unit_type = tech_gerudian
		}
		else = {
			change_unit_type = tech_cannorian
		}
	}
	else_if = {
		limit = {
			has_country_modifier = troll_administration
		}
		add_country_modifier = {
			name = restructuring_military
			duration = 3650
		}
		add_country_modifier = {
			name = troll_military
			duration = -1
		}
		if = {
            limit = {
                OR = {
                    capital_scope = { region = yezel_mora_region }
                    primary_culture = swamp_troll
                    AND = {
                        accepted_culture = swamp_troll
                        NOT = { culture_group = giantkind }
                    }
                }
            }
            change_unit_type = tech_swamp_troll
        }
        else = {
            change_unit_type = tech_troll    #may need custom one
        }
	}
	else_if = {
		limit = {
			has_country_modifier = gnollish_administration
		}
		add_country_modifier = {
			name = restructuring_military
			duration = 3650
		}
		add_country_modifier = {
			name = gnollish_military
			duration = -1
		}
		change_unit_type = tech_gnollish
		if = {
			limit = { is_tribal = no }
			set_country_flag = gnoll_reformed_mil_flag
		}
	}
	else_if = {
		limit = {
			has_country_modifier = goblin_administration
		}
		add_country_modifier = {
			name = restructuring_military
			duration = 3650
		}
		add_country_modifier = {
			name = goblin_military
			duration = -1
		}
		if = {
			limit = {
				OR = {
					capital_scope = { continent = serpentspine }
					dwarovar_goblin_culture_primary = yes
					AND = {
						dwarovar_goblin_culture_accepted = yes
						NOT = { culture_group = goblin }
					}
				}
			}
			change_unit_type = tech_cave_goblin
		}
		if = {
			limit = {
				OR = {
					capital_scope = { superregion = bulwar_superregion }
					primary_culture = exodus_goblin
					AND = {
						accepted_culture = exodus_goblin
						NOT = { culture_group = goblin }
					}
				}
			}
			change_unit_type = tech_exodus_goblin
		}
		if = {
			limit = {
				OR = {
					capital_scope = { superregion = deepwoods_superregion }
					primary_culture = forest_goblin
					AND = {
						accepted_culture = forest_goblin
						NOT = { culture_group = goblin }
					}
				}
			}
			change_unit_type = tech_forest_goblin
		}
		else = {
			change_unit_type = tech_goblin
		}
	}
	else_if = {
		limit = {
			has_country_modifier = gnomish_administration
		}
		add_country_modifier = {
			name = restructuring_military
			duration = 3650
		}
		add_country_modifier = {
			name = gnomish_military
			duration = -1
		}
		change_unit_type = tech_gnomish
	}
	else_if = {
		limit = {
			has_country_modifier = dwarven_administration
		}
		add_country_modifier = {
			name = restructuring_military
			duration = 3650
		}
		add_country_modifier = {
			name = dwarven_military
			duration = -1
		}
		change_unit_type = tech_dwarven
	}
	else_if = {
		limit = {
			has_country_modifier = kobold_administration
		}
		add_country_modifier = {
			name = restructuring_military
			duration = 3650
		}
		add_country_modifier = {
			name = kobold_military
			duration = -1
		}
		if = {
			limit = {
				OR = {
					capital_scope = { superregion = yanshen_superregion }
					capital_scope = { superregion = south_haless_superregion }
					capital_scope = { superregion = north_haless_superregion }
					capital_scope = { superregion = rahen_superregion }
					primary_culture = goldscale_kobold
					AND = {
						accepted_culture = goldscale_kobold
						NOT = { culture_group = kobold }
					}
				}
			}
			change_unit_type = tech_east_kobold
		}
		else_if = {
			limit = {
				capital_scope = { continent = serpentspine }
			}
			change_unit_type = tech_darkscale_kobold
		}
		else = {
			change_unit_type = tech_kobold
		}
	}
	else_if = {
		limit = {
			has_country_modifier = ruinborn_administration
		}
		add_country_modifier = {
			name = restructuring_military
			duration = 3650
		}
		add_country_modifier = {
			name = ruinborn_military
			duration = -1
		}
		if = {
			limit = {
				OR = {
					capital_scope = { superregion = ynn_superregion }
					capital_scope = { region = forest_of_the_cursed_ones_region }
				}
			}
			change_unit_type = tech_ynnic
		}
		else_if = {
			limit = {
				capital_scope = { superregion = eordand_superregion }
			}
			change_unit_type = tech_eordand
		}
		else_if = {
			limit = {
				capital_scope = { superregion = kheionai_superregion }
			}
			if = {
				limit = {
					OR = {
						culture_group = eltibhari_ruinborn_elf
						culture_group = devandi_ruinborn_elf
					}
				}
				change_unit_type = tech_bharbhen
			}
			else = {
				change_unit_type = tech_kheionai
			}
		}
		else_if = {
			limit = {
				capital_scope = { superregion = taychend_superregion }
			}
			if = {
				limit = {
					OR = {
						culture_group = eltibhari_ruinborn_elf
						culture_group = devandi_ruinborn_elf
						capital_scope = { region = chendhya_region }
					}
				}
				change_unit_type = tech_bharbhen
			}
			else = {
				change_unit_type = tech_taychendi
			}
		}
		else_if = {
			limit = {
				OR = {
					capital_scope = { region = haraf_region }
					capital_scope = { region = tor_nayyi_region }
				}
			}
			change_unit_type = tech_harafic
		}
		else_if = {
			limit = {
				OR = {
					capital_scope = { superregion = broken_lands_superregion }
					capital_scope = { superregion = ruin_proper_superregion }
				}
			}
			change_unit_type = tech_noruin
		}
		else_if = {
			limit = {
				OR = {
					capital_scope = { superregion = effelai_superregion }
					capital_scope = { region = amadia_region }
				}
			}
			if = {
				limit = {
					OR = {
						culture_group = eltibhari_ruinborn_elf
						culture_group = devandi_ruinborn_elf
					}
				}
				change_unit_type = tech_bharbhen
			}
			else = {
				change_unit_type = tech_south_aelantiri
			}
		}
		else = {
			change_unit_type = tech_noruin
		}
	}
	else_if = {
		limit = {
			has_country_modifier = harpy_administration
		}
		add_country_modifier = {
			name = restructuring_military
			duration = 3650
		}
		add_country_modifier = {
			name = harpy_military
			duration = -1
		}
		if = {
			limit = {
				OR = {
					capital_scope = { superregion = yanshen_superregion }
					capital_scope = { superregion = south_haless_superregion }
					capital_scope = { superregion = north_haless_superregion }
					primary_culture = feng_harpy
					AND = {
						accepted_culture = feng_harpy
						NOT = { culture_group = harpy }
					}
				}
			}
			change_unit_type = tech_feng_harpy
		}
		else_if = {
			limit = {
				OR = {
					capital_scope = { superregion = north_salahad_superregion }
					capital_scope = { superregion = west_sarhal_superregion }
					capital_scope = { superregion = fangaula_superregion }
					primary_culture = feng_harpy
					AND = {
						accepted_culture = nzeri_harpy
						NOT = { culture_group = harpy }
					}
				}
			}
			change_unit_type = tech_nzeri_harpy
		}
		else = {
			change_unit_type = tech_firanyan_harpy
		}
	}
	else_if = {
		limit = {
			has_country_modifier = halfling_administration
		}
		add_country_modifier = {
			name = restructuring_military
			duration = 3650
		}
		add_country_modifier = {
			name = halfling_military
			duration = -1
		}
        if = {
            limit = {
                OR = {
                    capital_scope = {
						superregion = west_sarhal_superregion
					}
					culture_group = vyzemby
                    AND = {
						OR = {
							accepted_culture = amezatany
							accepted_culture = mboala
							accepted_culture = mazava
							accepted_culture = fomarati
							accepted_culture = vyoronsi
						}
                        NOT = { culture_group = vyzemby }
                    }
                }
            }
            change_unit_type = tech_vyzemby
        }
        else = {
            change_unit_type = tech_halfling    #may need custom one
        }
	}
	else_if = {
		limit = {
			has_country_modifier = ogre_administration
		}
		add_country_modifier = {
			name = restructuring_military
			duration = 3650
		}
		add_country_modifier = {
			name = ogre_military
			duration = -1
		}
		if = {
			limit = {
				OR = {
					capital_scope = { superregion = yanshen_superregion }
					capital_scope = { superregion = south_haless_superregion }
					capital_scope = { superregion = north_haless_superregion }
					capital_scope = { superregion = rahen_superregion }
					primary_culture = horned_ogre
					AND = {
						accepted_culture = horned_ogre
						NOT = { culture_group = ogre }
					}
				}
			}
			change_unit_type = tech_eastern_ogre
		}
		else = {
			change_unit_type = tech_ogre	#may need custom one
		}
	}
	else_if = {
		limit = {
			has_country_modifier = centaur_administration
		}
		add_country_modifier = {
			name = restructuring_military
			duration = 3650
		}
		add_country_modifier = {
			name = centaur_military
			duration = -1
		}
		change_unit_type = tech_centaur
	}
	else_if = {
		limit = {
			has_country_modifier = harimari_administration
		}
		add_country_modifier = {
			name = restructuring_military
			duration = 3650
		}
		add_country_modifier = {
			name = harimari_military
			duration = -1
		}
		if = {
			limit = {
				OR = {
					capital_scope = { superregion = yanshen_superregion }
					capital_scope = { superregion = south_haless_superregion }
					capital_scope = { superregion = north_haless_superregion }
					primary_culture = serene_harimari
					primary_culture = roaming_harimari
					AND = {
						accepted_culture = serene_harimari
						NOT = { culture_group = harimari }
					}
					AND = {
						accepted_culture = roaming_harimari
						NOT = { culture_group = harimari }
					}
				}
			}
			change_unit_type = tech_east_harimari
		}
		else = {
			change_unit_type = tech_west_harimari
		}
	}
	else_if = {
		limit = {
			has_country_modifier = hobgoblin_administration
		}
		add_country_modifier = {
			name = restructuring_military
			duration = 3650
		}
		add_country_modifier = {
			name = hobgoblin_military
			duration = -1
		}
		if = { limit = { NOT = { has_dlc = "Cradle of Civilization" } }
			add_country_modifier = { 
				name = hobgoblin_military_no_dlc
				duration = -1  
			}
		}
		change_unit_type = tech_hobgoblin
	}
	else_if = {
		limit = {
			has_country_modifier = lizardfolk_administration
		}
		add_country_modifier = {
			name = restructuring_military
			duration = 3650
		}
		add_country_modifier = {
			name = lizardfolk_military
			duration = -1
		}
		change_unit_type = tech_lizardfolk
	}
}

clear_racial_administration = {
	remove_country_modifier = elven_administration
	remove_country_modifier = dwarven_administration
	remove_country_modifier = gnomish_administration
	remove_country_modifier = half_orcish_administration
	remove_country_modifier = half_elven_administration
	remove_country_modifier = kobold_administration
	remove_country_modifier = troll_administration
	remove_country_modifier = halfling_administration
	remove_country_modifier = harpy_administration
	remove_country_modifier = human_administration
	remove_country_modifier = orcish_administration
	remove_country_modifier = goblin_administration
	remove_country_modifier = gnollish_administration
	remove_country_modifier = ruinborn_administration
	remove_country_modifier = centaur_administration
	remove_country_modifier = harimari_administration
	remove_country_modifier = ogre_administration
	remove_country_modifier = hobgoblin_administration
	remove_country_modifier = lizardfolk_administration
}

clear_racial_military = {
	remove_country_modifier = elven_military
	remove_country_modifier = dwarven_military
	remove_country_modifier = gnomish_military
	remove_country_modifier = half_orcish_military
	remove_country_modifier = half_elven_military
	remove_country_modifier = kobold_military
	remove_country_modifier = troll_military
	remove_country_modifier = halfling_military
	remove_country_modifier = harpy_military
	remove_country_modifier = human_military
	remove_country_modifier = orcish_military
	remove_country_modifier = goblin_military
	remove_country_modifier = gnollish_military
	remove_country_modifier = ruinborn_military
	remove_country_modifier = centaur_military
	remove_country_modifier = harimari_military
	remove_country_modifier = ogre_military
	remove_country_modifier = hobgoblin_military
	remove_country_modifier = lizardfolk_military
	
	#modifiers if no Cradle of Civ dlc
	remove_country_modifier = hobgoblin_military_no_dlc
	remove_country_modifier = elven_military_no_dlc

	# Disband your undead army
	if = {
		limit = { has_country_modifier = undead_military }
		custom_tooltip = tooltip_undead_army_destroy_all_armies

		hidden_effect = {
			every_owned_province = {
				kill_units = {
					who = owner
					type = infantry
				}
				kill_units = {
					who = owner
					type = cavalry
				}
			}
		}
		remove_country_modifier = undead_military
	}
}

clear_racial_pop_migration_flags = {
	clr_country_flag = racial_pop_migrate_adjacent
	clr_country_flag = racial_pop_migrate_within_country
	clr_country_flag = racial_pop_migrate_outside_country

	clr_country_flag = racial_pop_migrate_colony

}

clear_racial_pop_tolerance_chance_flags = {
	clr_country_flag = racial_pop_small_increase
	clr_country_flag = racial_pop_medium_increase
	clr_country_flag = racial_pop_large_increase
	clr_country_flag = racial_pop_largest_increase

	clr_country_flag = racial_pop_small_decrease
	clr_country_flag = racial_pop_medium_decrease
	clr_country_flag = racial_pop_large_decrease
	clr_country_flag = racial_pop_largest_decrease
}

save_primary_culture = {
	ROOT = {
		export_to_variable = {
			value = primary_culture
			which = my_primary_culture
			#who = ROOT
		}
	}
}

lock_racial_admin = {
    if = { 
        limit = { 
            end_game_tags_blocked = yes 
        }
        custom_tooltip = locked_racial_administration_tt
        hidden_effect = {
            save_primary_culture = yes
            set_country_flag = locked_racial_administration
        }
    }
}

generic_add_race_minority_size_effect = {
	custom_tooltip = add_$race$_minority_size_effect_tooltip
	hidden_effect = {
	
		# Do nothing if the province has a majority or a large minority already
		if = {
			limit = {
				OR = {
					has_$race$_majority_trigger = yes
					has_large_$race$_minority_trigger = yes
				}
			}
		}
	
		#Impact Oppressed
		else_if = {
			limit = {
				has_province_modifier = $race$_minority_oppressed_small
			}
			remove_province_modifier = $race$_minority_oppressed_small
			add_permanent_province_modifier = {
				name = $race$_minority_oppressed_large
				duration = -1
			}
		}

		#Impact Coexisting
		else_if = {
			limit = {
				has_province_modifier = $race$_minority_coexisting_small
			}
			remove_province_modifier = $race$_minority_coexisting_small
			add_permanent_province_modifier = {
				name = $race$_minority_coexisting_large
				duration = -1
			}
		}

		#Impact Integrated
		else_if = {
			limit = {
				has_province_modifier = $race$_minority_integrated_small
			}
			remove_province_modifier = $race$_minority_integrated_small
			add_permanent_province_modifier = {
				name = $race$_minority_integrated_large
				duration = -1
			}
		}

		# Add the minority with the right tolerance if they have none

		#Impact Oppressed
		else_if = {
			limit = {
				owner = { low_tolerance_$race$_race_trigger = yes }
			}
			add_permanent_province_modifier = {
				name = $race$_minority_oppressed_small
				duration = -1
			}
		}

		#Impact Coexisting
		else_if = {
			limit = {
				owner = { medium_tolerance_$race$_race_trigger = yes }
			}
			add_permanent_province_modifier = {
				name = $race$_minority_coexisting_small
				duration = -1
			}
		}

		#Impact Integrated
		else_if = {
			limit = {
				owner = { high_tolerance_$race$_race_trigger = yes }
			}
			add_permanent_province_modifier = {
				name = $race$_minority_integrated_small
				duration = -1
			}
		}
	}
}

generic_remove_race_minority_size_effect = {
	custom_tooltip = remove_$race$_minority_size_effect_tooltip
	hidden_effect = {
		#Impact Oppressed
		if = {
			limit = {
				has_province_modifier = $race$_minority_oppressed_small
			}
			remove_province_modifier = $race$_minority_oppressed_small
		}
		else_if = {
			limit = {
				has_province_modifier = $race$_minority_oppressed_large
			}
			remove_province_modifier = $race$_minority_oppressed_large
			add_permanent_province_modifier = {
				name = $race$_minority_oppressed_small
				duration = -1
			}
		}

		#Impact Coexisting
		else_if = {
			limit = {
				has_province_modifier = $race$_minority_coexisting_small
			}
			remove_province_modifier = $race$_minority_coexisting_small
		}
		else_if = {
			limit = {
				has_province_modifier = $race$_minority_coexisting_large
			}
			remove_province_modifier = $race$_minority_coexisting_large
			add_permanent_province_modifier = {
				name = $race$_minority_coexisting_small
				duration = -1
			}
		}

		#Impact Integrated
		else_if = {
			limit = {
				has_province_modifier = $race$_minority_integrated_small
			}
			remove_province_modifier = $race$_minority_integrated_small
		}
		else_if = {
			limit = {
				has_province_modifier = $race$_minority_integrated_large
			}
			remove_province_modifier = $race$_minority_integrated_large
			add_permanent_province_modifier = {
				name = $race$_minority_integrated_small
				duration = -1
			}
		}
	}
}



generic_increase_of_racial_tolerance_effect = {
	[[small]
	custom_tooltip = small_increase_in_$race$_tolerance_tooltip
	hidden_effect = {
		# Increases by 5
		change_variable = {
			which = $race$_race_tolerance
			value = 5
		}
	}
	]
	[[medium]
	custom_tooltip = medium_increase_in_$race$_tolerance_tooltip
	hidden_effect = {
		# Increases by 10
		change_variable = {
			which = $race$_race_tolerance
			value = 10
		}
	}
	]
	[[large]
	custom_tooltip = large_increase_in_$race$_tolerance_tooltip
	hidden_effect = {
		# Increases by 15
		change_variable = {
			which = $race$_race_tolerance
			value = 15
		}
	}
	]
	[[largest]
	custom_tooltip = largest_increase_in_$race$_tolerance_tooltip
	hidden_effect = {
		# Increases by 20
		change_variable = {
			which = $race$_race_tolerance
			value = 20
		}
	}
	]

	
	hidden_effect = {
		if = {	# If it ends up above the max it puts it at the highest point (never above 100)
			limit = {
				check_variable = {
					which = $race$_race_tolerance
					which = max_race_tolerance
				}
			}
			set_variable = {
				which = $race$_race_tolerance
				which = max_race_tolerance
			}
		}
		#every_owned_province = {
			# if you are wondering why this produces 1 is_empty scope error per iteration
			# it's because for some reason every_owned_province in scripted effects produces one invalid scope at the end of iteration
			# or at least i think it's only in scripted effects
		#	update_specific_racial_province_modifier_tolerance = { race = $race$ }
		#}
		# so do it in a country event instead
		# (this also generates only num_of_races instances of that giant effect rather than num_of_races*8)
		country_event = { id = racial_pop_events_$race$.99 }
	}
}
# when adding a new race, need to define tooltips for small/medium/large/largest_increase_in_<race>_tolerance

generic_decrease_of_racial_tolerance_effect = {
	[[small]
	custom_tooltip = small_decrease_in_$race$_tolerance_tooltip
	hidden_effect = {
		# Decreases by 5
		subtract_variable = {
			which = $race$_race_tolerance
			value = 5
		}
	}
	]
	[[medium]
	custom_tooltip = medium_decrease_in_$race$_tolerance_tooltip
	hidden_effect = {
		# Decreases by 10
		subtract_variable = {
			which = $race$_race_tolerance
			value = 10
		}
	}
	]
	[[large]
	custom_tooltip = large_decrease_in_$race$_tolerance_tooltip
	hidden_effect = {
		# Decreases by 15
		subtract_variable = {
			which = $race$_race_tolerance
			value = 15
		}
	}
	]
	[[largest]
	custom_tooltip = largest_decrease_in_$race$_tolerance_tooltip
	hidden_effect = {
		# Decreases by 20
		subtract_variable = {
			which = $race$_race_tolerance
			value = 20
		}
	}
	]
	
	
	hidden_effect = {
		if = {	# If it ends up below 0 it adds back up to 1
			limit = {
				NOT = {
					check_variable = {
						which = $race$_race_tolerance
						value = 1
					}
				}
			}
			set_variable = {
				which = $race$_race_tolerance
				value = 1
			}
		}
		#every_owned_province = {
			# if you are wondering why this produces 1 is_empty scope error per iteration
			# it's because for some reason every_owned_province in scripted effects produces one invalid scope at the end of iteration
			# or at least i think it's only in scripted effects
		#	update_specific_racial_province_modifier_tolerance = { race = $race$ }
		#}
		# so do it in a country event instead
		# (this also generates only num_of_races instances of that giant effect rather than num_of_races*8)
		country_event = { id = racial_pop_events_$race$.99 }

	}
}
# when adding a new race, need to define tooltips for small/medium/large/largest_decrease_in_<race>_tolerance

#example:
#generic_increase_of_racial_tolerance_effect = { race = elven small = yes }

#okman note: I could replace all the scripted effects completely,
#i.e. turn all small_increase_of_dwarven_tolerance_effect into generic_increase_of_racial_tolerance_effect = { race = dwarven small = yes }
#but people are very used to these and will keep trying to use the old effects, plus it could cause a ton of merge conflicts since they're everyhwere
#so for now the outer effects have been left

# Dwarven
small_increase_of_dwarven_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = dwarven small = yes }
}

medium_increase_of_dwarven_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = dwarven medium = yes }
}

large_increase_of_dwarven_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = dwarven large = yes }
}

largest_increase_of_dwarven_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = dwarven largest = yes }
}

small_decrease_of_dwarven_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = dwarven small = yes }
}

medium_decrease_of_dwarven_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = dwarven medium = yes }
}

large_decrease_of_dwarven_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = dwarven large = yes }
}

largest_decrease_of_dwarven_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = dwarven largest = yes }
}

add_dwarven_minority_size_effect = {
	generic_add_race_minority_size_effect = { race = dwarven }
}

remove_dwarven_minority_size_effect = {
	generic_remove_race_minority_size_effect = { race = dwarven }
}


# Gnomish
small_increase_of_gnomish_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = gnomish small = yes }
}

medium_increase_of_gnomish_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = gnomish medium = yes }
}

large_increase_of_gnomish_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = gnomish large = yes }
}

largest_increase_of_gnomish_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = gnomish largest = yes }
}

small_decrease_of_gnomish_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = gnomish small = yes }
}

medium_decrease_of_gnomish_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = gnomish medium = yes }
}

large_decrease_of_gnomish_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = gnomish large = yes }
}

largest_decrease_of_gnomish_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = gnomish largest = yes }
}

add_gnomish_minority_size_effect = {
	generic_add_race_minority_size_effect = { race = gnomish }
}

remove_gnomish_minority_size_effect = {
	generic_remove_race_minority_size_effect = { race = gnomish }
	if = {
		limit = {
			has_any_gnomish_pop_trigger = no
		}
	
		# remove all gommo/gnome headquarters if there are no gnomes left
		remove_province_modifier = gnomish_institute_gommo
		remove_province_modifier = aqatbar_gnome_quarter
		remove_province_modifier = rayavhashapal_gnome_quarter
		remove_province_modifier = port_jaher_gnome_quarter
		remove_province_modifier = feiten_gnome_quarter
		remove_province_modifier = kherka_gnome_quarter
		remove_province_modifier = camsinh_gnome_quarter
		remove_province_modifier = arawkelin_gnome_quarter
		remove_province_modifier = tianlou_gnome_quarter
		remove_province_modifier = sarisung_gnome_quarter
		remove_province_modifier = maoji_gnome_quarter
	}
}

# Elven
small_increase_of_elven_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = elven small = yes }
}

medium_increase_of_elven_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = elven medium = yes }
}

large_increase_of_elven_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = elven large = yes }
}

largest_increase_of_elven_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = elven largest = yes }
}

small_decrease_of_elven_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = elven small = yes }
}

medium_decrease_of_elven_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = elven medium = yes }
}

large_decrease_of_elven_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = elven large = yes }
}

largest_decrease_of_elven_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = elven largest = yes }
}

add_elven_minority_size_effect = {
	generic_add_race_minority_size_effect = { race = elven }
}

remove_elven_minority_size_effect = {
	generic_remove_race_minority_size_effect = { race = elven }
}

# Half-Orcish
small_increase_of_half_orcish_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = half_orcish small = yes }
}

medium_increase_of_half_orcish_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = half_orcish medium = yes }
}

large_increase_of_half_orcish_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = half_orcish large = yes }
}

largest_increase_of_half_orcish_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = half_orcish largest = yes }
}

small_decrease_of_half_orcish_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = half_orcish small = yes }
}

medium_decrease_of_half_orcish_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = half_orcish medium = yes }
}

large_decrease_of_half_orcish_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = half_orcish large = yes }
}

largest_decrease_of_half_orcish_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = half_orcish largest = yes }
}

add_half_orcish_minority_size_effect = {
	generic_add_race_minority_size_effect = { race = half_orcish }
}

remove_half_orcish_minority_size_effect = {
	generic_remove_race_minority_size_effect = { race = half_orcish }
}


# Kobold
small_increase_of_kobold_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = kobold small = yes }
}

medium_increase_of_kobold_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = kobold medium = yes }
}

large_increase_of_kobold_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = kobold large = yes }
}

largest_increase_of_kobold_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = kobold largest = yes }
}

small_decrease_of_kobold_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = kobold small = yes }
}

medium_decrease_of_kobold_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = kobold medium = yes }
}

large_decrease_of_kobold_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = kobold large = yes }
}

largest_decrease_of_kobold_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = kobold largest = yes }
}

add_kobold_minority_size_effect = {
	generic_add_race_minority_size_effect = { race = kobold }
}

remove_kobold_minority_size_effect = {
	generic_remove_race_minority_size_effect = { race = kobold }
}

# Gnollish
small_increase_of_gnollish_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = gnollish small = yes }
}

medium_increase_of_gnollish_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = gnollish medium = yes }
}

large_increase_of_gnollish_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = gnollish large = yes }
}

largest_increase_of_gnollish_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = gnollish largest = yes }
}

small_decrease_of_gnollish_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = gnollish small = yes }
}

medium_decrease_of_gnollish_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = gnollish medium = yes }
}

large_decrease_of_gnollish_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = gnollish large = yes }
}

largest_decrease_of_gnollish_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = gnollish largest = yes }
}

add_gnollish_minority_size_effect = {
	generic_add_race_minority_size_effect = { race = gnollish }
}

remove_gnollish_minority_size_effect = {
	generic_remove_race_minority_size_effect = { race = gnollish }
}

# Orcish
small_increase_of_orcish_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = orcish small = yes }
}

medium_increase_of_orcish_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = orcish medium = yes }
}

large_increase_of_orcish_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = orcish large = yes }
}

largest_increase_of_orcish_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = orcish largest = yes }
}

small_decrease_of_orcish_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = orcish small = yes }
}

medium_decrease_of_orcish_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = orcish medium = yes }
}

large_decrease_of_orcish_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = orcish large = yes }
}

largest_decrease_of_orcish_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = orcish largest = yes }
}

add_orcish_minority_size_effect = {
	generic_add_race_minority_size_effect = { race = orcish }
}

remove_orcish_minority_size_effect = {
	generic_remove_race_minority_size_effect = { race = orcish }
}

# Halfling
small_increase_of_halfling_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = halfling small = yes }
}

medium_increase_of_halfling_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = halfling medium = yes }
}

large_increase_of_halfling_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = halfling large = yes }
}

largest_increase_of_halfling_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = halfling largest = yes }
}

small_decrease_of_halfling_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = halfling small = yes }
}

medium_decrease_of_halfling_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = halfling medium = yes }
}

large_decrease_of_halfling_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = halfling large = yes }
}

largest_decrease_of_halfling_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = halfling largest = yes }
}

add_halfling_minority_size_effect = {
	generic_add_race_minority_size_effect = { race = halfling }
}

remove_halfling_minority_size_effect = {
	generic_remove_race_minority_size_effect = { race = halfling }
}

# Human
small_increase_of_human_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = human small = yes }
}

medium_increase_of_human_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = human medium = yes }
}

large_increase_of_human_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = human large = yes }
}

largest_increase_of_human_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = human largest = yes }
}

small_decrease_of_human_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = human small = yes }
}

medium_decrease_of_human_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = human medium = yes }
}

large_decrease_of_human_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = human large = yes }
}

largest_decrease_of_human_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = human largest = yes }
}

add_human_minority_size_effect = {
	generic_add_race_minority_size_effect = { race = human }
}

remove_human_minority_size_effect = {
	generic_remove_race_minority_size_effect = { race = human }
}

# Half-Elven
small_increase_of_half_elven_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = half_elven small = yes }
}

medium_increase_of_half_elven_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = half_elven medium = yes }
}

large_increase_of_half_elven_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = half_elven large = yes }
}

largest_increase_of_half_elven_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = half_elven largest = yes }
}

small_decrease_of_half_elven_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = half_elven small = yes }
}

medium_decrease_of_half_elven_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = half_elven medium = yes }
}

large_decrease_of_half_elven_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = half_elven large = yes }
}

largest_decrease_of_half_elven_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = half_elven largest = yes }
}

add_half_elven_minority_size_effect = {
	generic_add_race_minority_size_effect = { race = half_elven }
}

remove_half_elven_minority_size_effect = {
	generic_remove_race_minority_size_effect = { race = half_elven }
}

# Ruinborn
small_increase_of_ruinborn_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = ruinborn small = yes }
}

medium_increase_of_ruinborn_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = ruinborn medium = yes }
}

large_increase_of_ruinborn_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = ruinborn large = yes }
}

largest_increase_of_ruinborn_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = ruinborn largest = yes }
}

small_decrease_of_ruinborn_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = ruinborn small = yes }
}

medium_decrease_of_ruinborn_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = ruinborn medium = yes }
}

large_decrease_of_ruinborn_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = ruinborn large = yes }
}

largest_decrease_of_ruinborn_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = ruinborn largest = yes }
}

add_ruinborn_minority_size_effect = {
	generic_add_race_minority_size_effect = { race = ruinborn }
}

remove_ruinborn_minority_size_effect = {
	generic_remove_race_minority_size_effect = { race = ruinborn }
}

# Goblin
small_increase_of_goblin_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = goblin small = yes }
}

medium_increase_of_goblin_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = goblin medium = yes }
}

large_increase_of_goblin_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = goblin large = yes }
}

largest_increase_of_goblin_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = goblin largest = yes }
}

small_decrease_of_goblin_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = goblin small = yes }
}

medium_decrease_of_goblin_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = goblin medium = yes }
}

large_decrease_of_goblin_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = goblin large = yes }
}

largest_decrease_of_goblin_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = goblin largest = yes }
}

add_goblin_minority_size_effect = {
	generic_add_race_minority_size_effect = { race = goblin }
}

remove_goblin_minority_size_effect = {
	generic_remove_race_minority_size_effect = { race = goblin }
}

# Harpy
small_increase_of_harpy_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = harpy small = yes }
}

medium_increase_of_harpy_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = harpy medium = yes }
}

large_increase_of_harpy_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = harpy large = yes }
}

largest_increase_of_harpy_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = harpy largest = yes }
}

small_decrease_of_harpy_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = harpy small = yes }
}

medium_decrease_of_harpy_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = harpy medium = yes }
}

large_decrease_of_harpy_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = harpy large = yes }
}

largest_decrease_of_harpy_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = harpy largest = yes }
}

add_harpy_minority_size_effect = {
	generic_add_race_minority_size_effect = { race = harpy }
}

remove_harpy_minority_size_effect = {
	generic_remove_race_minority_size_effect = { race = harpy }
}

# Troll
small_increase_of_troll_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = troll small = yes }
}

medium_increase_of_troll_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = troll medium = yes }
}

large_increase_of_troll_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = troll large = yes }
}

largest_increase_of_troll_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = troll largest = yes }
}

small_decrease_of_troll_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = troll small = yes }
}

medium_decrease_of_troll_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = troll medium = yes }
}

large_decrease_of_troll_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = troll large = yes }
}

largest_decrease_of_troll_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = troll largest = yes }
}

add_troll_minority_size_effect = {
	generic_add_race_minority_size_effect = { race = troll }
}

remove_troll_minority_size_effect = {
	generic_remove_race_minority_size_effect = { race = troll }
}

# Ogre
small_increase_of_ogre_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = ogre small = yes }
}

medium_increase_of_ogre_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = ogre medium = yes }
}

large_increase_of_ogre_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = ogre large = yes }
}

largest_increase_of_ogre_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = ogre largest = yes }
}

small_decrease_of_ogre_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = ogre small = yes }
}

medium_decrease_of_ogre_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = ogre medium = yes }
}

large_decrease_of_ogre_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = ogre large = yes }
}

largest_decrease_of_ogre_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = ogre largest = yes }
}

add_ogre_minority_size_effect = {
	generic_add_race_minority_size_effect = { race = ogre }
}

remove_ogre_minority_size_effect = {
	generic_remove_race_minority_size_effect = { race = ogre }
}

# Harimari
small_increase_of_harimari_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = harimari small = yes }
}

medium_increase_of_harimari_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = harimari medium = yes }
}

large_increase_of_harimari_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = harimari large = yes }
}

largest_increase_of_harimari_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = harimari largest = yes }
}

small_decrease_of_harimari_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = harimari small = yes }
}

medium_decrease_of_harimari_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = harimari medium = yes }
}

large_decrease_of_harimari_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = harimari large = yes }
}

largest_decrease_of_harimari_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = harimari largest = yes }
}

add_harimari_minority_size_effect = {
	generic_add_race_minority_size_effect = { race = harimari }
}

remove_harimari_minority_size_effect = {
	generic_remove_race_minority_size_effect = { race = harimari }
}

# Centaur
small_increase_of_centaur_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = centaur small = yes }
}

medium_increase_of_centaur_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = centaur medium = yes }
}

large_increase_of_centaur_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = centaur large = yes }
}

largest_increase_of_centaur_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = centaur largest = yes }
}

small_decrease_of_centaur_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = centaur small = yes }
}

medium_decrease_of_centaur_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = centaur medium = yes }
}

large_decrease_of_centaur_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = centaur large = yes }
}

largest_decrease_of_centaur_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = centaur largest = yes }
}

add_centaur_minority_size_effect = {
	generic_add_race_minority_size_effect = { race = centaur }
}

remove_centaur_minority_size_effect = {
	generic_remove_race_minority_size_effect = { race = centaur }
}

# Hobgoblin
small_increase_of_hobgoblin_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = hobgoblin small = yes }
}

medium_increase_of_hobgoblin_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = hobgoblin medium = yes }
}

large_increase_of_hobgoblin_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = hobgoblin large = yes }
}

largest_increase_of_hobgoblin_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = hobgoblin largest = yes }
}

small_decrease_of_hobgoblin_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = hobgoblin small = yes }
}

medium_decrease_of_hobgoblin_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = hobgoblin medium = yes }
}

large_decrease_of_hobgoblin_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = hobgoblin large = yes }
}

largest_decrease_of_hobgoblin_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = hobgoblin largest = yes }
}

add_hobgoblin_minority_size_effect = {
	generic_add_race_minority_size_effect = { race = hobgoblin }
}

remove_hobgoblin_minority_size_effect = {
	generic_remove_race_minority_size_effect = { race = hobgoblin }
}

# Lizardfolk
small_increase_of_lizardfolk_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = lizardfolk small = yes }
}

medium_increase_of_lizardfolk_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = lizardfolk medium = yes }
}

large_increase_of_lizardfolk_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = lizardfolk large = yes }
}

largest_increase_of_lizardfolk_tolerance_effect = {
	generic_increase_of_racial_tolerance_effect = { race = lizardfolk largest = yes }
}

small_decrease_of_lizardfolk_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = lizardfolk small = yes }
}

medium_decrease_of_lizardfolk_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = lizardfolk medium = yes }
}

large_decrease_of_lizardfolk_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = lizardfolk large = yes }
}

largest_decrease_of_lizardfolk_tolerance_effect = {
	generic_decrease_of_racial_tolerance_effect = { race = lizardfolk largest = yes }
}

add_lizardfolk_minority_size_effect = {
	generic_add_race_minority_size_effect = { race = lizardfolk }
}

remove_lizardfolk_minority_size_effect = {
	generic_remove_race_minority_size_effect = { race = lizardfolk }
}


# adds majority of specific race with the correct tolerance
add_majority_with_correct_tolerance = {
	if = {
		limit = {
			OR = {
				is_empty = yes
				owner = { has_country_modifier = $race$_administration }
			} 
		}
		# if they have the administration, it's primary
		# special case: this is an uncolonised province, then they're also primary
		add_permanent_province_modifier = {
			name = $race$_majority_primary
			duration = -1
		}
	}
	
	else_if = {
		limit = { owner = { high_tolerance_$race$_race_trigger = yes } }
		add_permanent_province_modifier = {
			name = $race$_majority_integrated
			duration = -1
		}
	}
	
	else_if = {
		limit = { owner = { medium_tolerance_$race$_race_trigger = yes } }
		add_permanent_province_modifier = {
			name = $race$_majority_coexisting
			duration = -1
		}
	}

	else = {
		# low tolerance
		add_permanent_province_modifier = {
			name = $race$_majority_oppressed
			duration = -1
		}
	}
}

# adds small/large minority of specific race with the correct tolerance
add_minority_with_correct_tolerance = {
	if = {
		limit = { owner = { high_tolerance_$race$_race_trigger = yes } }
		add_permanent_province_modifier = {
			name = $race$_minority_integrated_$size$
			duration = -1
		}
	}

	else_if = {
		limit = { owner = { medium_tolerance_$race$_race_trigger = yes } }
		add_permanent_province_modifier = {
			name = $race$_minority_coexisting_$size$
			duration = -1
		}
	}

	else = {
		# low tolerance
		add_permanent_province_modifier = {
			name = $race$_minority_oppressed_$size$
			duration = -1
		}
	}
}

add_majority_of_current_culture = {
	#AddNewRaceHere

	#elven
	if = {
		limit = {
			NOT = { has_elven_majority_trigger = yes }
			culture_is_elven = yes
		}
		add_majority_with_correct_tolerance = { race = elven }
	}
	
	#dwarven
	else_if = {
		limit = {
			NOT = { has_dwarven_majority_trigger = yes }
			culture_is_dwarven = yes
		}
		add_majority_with_correct_tolerance = { race = dwarven }
	}
	
	#halfling
	else_if = {
		limit = {
			NOT = { has_halfling_majority_trigger = yes }
			culture_is_halfling = yes
		}
		add_majority_with_correct_tolerance = { race = halfling }
	}
	
	#gnomish
	else_if = {
		limit = {
			NOT = { has_gnomish_majority_trigger = yes }
			culture_is_gnomish = yes
		}
		add_majority_with_correct_tolerance = { race = gnomish }
	}
	
	#half_orcish
	else_if = {
		limit = {
			NOT = { has_half_orcish_majority_trigger = yes }
			culture_is_half_orcish = yes
		}
		add_majority_with_correct_tolerance = { race = half_orcish }
	}
	
	#kobold
	else_if = {
		limit = {
			NOT = { has_kobold_majority_trigger = yes }
			culture_is_kobold = yes
		}
		add_majority_with_correct_tolerance = { race = kobold }
	}
	
	#orcish
	else_if = {
		limit = {
			NOT = { has_orcish_majority_trigger = yes }
			culture_is_orcish = yes
		}
		add_majority_with_correct_tolerance = { race = orcish }
	}
	
	#human
	else_if = {
		limit = {
			NOT = { has_human_majority_trigger = yes }
			culture_is_human = yes
		}
		add_majority_with_correct_tolerance = { race = human }
	}
	
	#gnollish
	else_if = {
		limit = {
			NOT = { has_gnollish_majority_trigger = yes }
			culture_is_gnollish = yes
		}
		add_majority_with_correct_tolerance = { race = gnollish }
	}
	
	#ruinborn
	else_if = {
		limit = {
			NOT = { has_ruinborn_majority_trigger = yes }
			culture_is_ruinborn = yes
		}
		add_majority_with_correct_tolerance = { race = ruinborn }
	}
	
	#goblin
	else_if = {
		limit = {
			NOT = { has_goblin_majority_trigger = yes }
			culture_is_goblin = yes
		}
		add_majority_with_correct_tolerance = { race = goblin }
	}
	
	#harpy
	else_if = {
		limit = {
			NOT = { has_harpy_majority_trigger = yes }
			culture_is_harpy = yes
		}
		add_majority_with_correct_tolerance = { race = harpy }
	}
	
	#troll
	else_if = {
		limit = {
			NOT = { has_troll_majority_trigger = yes }
			culture_is_troll = yes
		}
		add_majority_with_correct_tolerance = { race = troll }
	}
	
	#half_elven
	else_if = {
		limit = {
			NOT = { has_half_elven_majority_trigger = yes }
			culture_is_half_elven = yes
		}
		add_majority_with_correct_tolerance = { race = half_elven }
	}
	
	#harimari
	else_if = {
		limit = {
			NOT = { has_harimari_majority_trigger = yes }
			culture_is_harimari = yes
		}
		add_majority_with_correct_tolerance = { race = harimari }
	}
	
	#hobgoblin
	else_if = {
		limit = {
			NOT = { has_hobgoblin_majority_trigger = yes }
			culture_is_hobgoblin = yes
		}
		add_majority_with_correct_tolerance = { race = hobgoblin }
	}
	
	#centaur
	else_if = {
		limit = {
			NOT = { has_centaur_majority_trigger = yes }
			culture_is_centaur = yes
		}
		add_majority_with_correct_tolerance = { race = centaur }
	}
	
	#ogre
	else_if = {
		limit = {
			NOT = { has_ogre_majority_trigger = yes }
			culture_is_ogre = yes
		}
		add_majority_with_correct_tolerance = { race = ogre }
	}
	
	#lizardfolk
	else_if = {
		limit = {
			NOT = { has_lizardfolk_majority_trigger = yes }
			culture_is_lizardfolk = yes
		}
		add_majority_with_correct_tolerance = { race = lizardfolk }
	}

}

convert_majority_to_minority = {
	#AddNewRaceHere

	#elven
	if = {
		limit = {
			has_elven_majority_trigger = yes
			NOT = { culture_is_elven = yes }
		}
		add_minority_with_correct_tolerance = { race = elven size = $size$ }
		
		remove_province_modifier = elven_majority_primary
		remove_province_modifier = elven_majority_integrated
		remove_province_modifier = elven_majority_coexisting
		remove_province_modifier = elven_majority_oppressed
	}

	#dwarven
	else_if = {
		limit = {
			has_dwarven_majority_trigger = yes
			NOT = { culture_is_dwarven = yes }
		}
		add_minority_with_correct_tolerance = { race = dwarven size = $size$ }
		
		remove_province_modifier = dwarven_majority_primary
		remove_province_modifier = dwarven_majority_integrated
		remove_province_modifier = dwarven_majority_coexisting
		remove_province_modifier = dwarven_majority_oppressed
	}

	#halfling
	else_if = {
		limit = {
			has_halfling_majority_trigger = yes
			NOT = { culture_is_halfling = yes }
		}
		add_minority_with_correct_tolerance = { race = halfling size = $size$ }

		remove_province_modifier = halfling_majority_primary
		remove_province_modifier = halfling_majority_integrated
		remove_province_modifier = halfling_majority_coexisting
		remove_province_modifier = halfling_majority_oppressed
	}

	#gnomish
	else_if = {
		limit = {
			has_gnomish_majority_trigger = yes
			NOT = { culture_is_gnomish = yes }
		}
		add_minority_with_correct_tolerance = { race = gnomish size = $size$ }

		remove_province_modifier = gnomish_majority_primary
		remove_province_modifier = gnomish_majority_integrated
		remove_province_modifier = gnomish_majority_coexisting
		remove_province_modifier = gnomish_majority_oppressed
	}

	#half_orcish
	else_if = {
		limit = {
			has_half_orcish_majority_trigger = yes
			NOT = { culture_is_half_orcish = yes }
		}
		add_minority_with_correct_tolerance = { race = half_orcish size = $size$ }

		remove_province_modifier = half_orcish_majority_primary
		remove_province_modifier = half_orcish_majority_integrated
		remove_province_modifier = half_orcish_majority_coexisting
		remove_province_modifier = half_orcish_majority_oppressed
	}

	#orcish
	else_if = {
		limit = {
			has_orcish_majority_trigger = yes
			NOT = { culture_is_orcish = yes }
		}
		add_minority_with_correct_tolerance = { race = orcish size = $size$ }
		
		remove_province_modifier = orcish_majority_primary
		remove_province_modifier = orcish_majority_integrated
		remove_province_modifier = orcish_majority_coexisting
		remove_province_modifier = orcish_majority_oppressed
	}

	#human
	else_if = {
		limit = {
			has_human_majority_trigger = yes
			NOT = { culture_is_human = yes }
		}
		add_minority_with_correct_tolerance = { race = human size = $size$ }

		remove_province_modifier = human_majority_primary
		remove_province_modifier = human_majority_integrated
		remove_province_modifier = human_majority_coexisting
		remove_province_modifier = human_majority_oppressed
	}

	#gnollish
	else_if = {
		limit = {
			has_gnollish_majority_trigger = yes
			NOT = { culture_is_gnollish = yes }
		}
		add_minority_with_correct_tolerance = { race = gnollish size = $size$ }

		remove_province_modifier = gnollish_majority_primary
		remove_province_modifier = gnollish_majority_integrated
		remove_province_modifier = gnollish_majority_coexisting
		remove_province_modifier = gnollish_majority_oppressed
	}

	#ruinborn
	else_if = {
		limit = {
			has_ruinborn_majority_trigger = yes
			NOT = { culture_is_ruinborn = yes }
		}
		add_minority_with_correct_tolerance = { race = ruinborn size = $size$ }
			
		remove_province_modifier = ruinborn_majority_primary
		remove_province_modifier = ruinborn_majority_integrated
		remove_province_modifier = ruinborn_majority_coexisting
		remove_province_modifier = ruinborn_majority_oppressed
	}

	#goblin
	else_if = {
		limit = {
			has_goblin_majority_trigger = yes
			NOT = { culture_is_goblin = yes }
		}
		add_minority_with_correct_tolerance = { race = goblin size = $size$ }

		remove_province_modifier = goblin_majority_primary
		remove_province_modifier = goblin_majority_integrated
		remove_province_modifier = goblin_majority_coexisting
		remove_province_modifier = goblin_majority_oppressed
	}

	#harpy
	else_if = {
		limit = {
			has_harpy_majority_trigger = yes
			NOT = { culture_is_harpy = yes }
		}
		add_minority_with_correct_tolerance = { race = harpy size = $size$ }

		remove_province_modifier = harpy_majority_primary
		remove_province_modifier = harpy_majority_integrated
		remove_province_modifier = harpy_majority_coexisting
		remove_province_modifier = harpy_majority_oppressed
	}

	#troll
	else_if = {
		limit = {
			has_troll_majority_trigger = yes
			NOT = { culture_is_troll = yes }
		}
		add_minority_with_correct_tolerance = { race = troll size = $size$ }

		remove_province_modifier = troll_majority_primary
		remove_province_modifier = troll_majority_integrated
		remove_province_modifier = troll_majority_coexisting
		remove_province_modifier = troll_majority_oppressed
	}

	#half_elven
	else_if = {
		limit = {
			has_half_elven_majority_trigger = yes
			NOT = { culture_is_half_elven = yes }
		}
		add_minority_with_correct_tolerance = { race = half_elven size = $size$ }

		remove_province_modifier = half_elven_majority_primary
		remove_province_modifier = half_elven_majority_integrated
		remove_province_modifier = half_elven_majority_coexisting
		remove_province_modifier = half_elven_majority_oppressed
	}

	#kobold
	else_if = {
		limit = {
			has_kobold_majority_trigger = yes
			NOT = { culture_is_kobold = yes }
		}
		add_minority_with_correct_tolerance = { race = kobold size = $size$ }

		remove_province_modifier = kobold_majority_primary
		remove_province_modifier = kobold_majority_integrated
		remove_province_modifier = kobold_majority_coexisting
		remove_province_modifier = kobold_majority_oppressed
	}

	#harimari
	else_if = {
		limit = {
			has_harimari_majority_trigger = yes
			NOT = { culture_is_harimari = yes }
		}
		add_minority_with_correct_tolerance = { race = harimari size = $size$ }

		remove_province_modifier = harimari_majority_primary
		remove_province_modifier = harimari_majority_integrated
		remove_province_modifier = harimari_majority_coexisting
		remove_province_modifier = harimari_majority_oppressed
	}

	#hobgoblin
	else_if = {
		limit = {
			has_hobgoblin_majority_trigger = yes
			NOT = { culture_is_hobgoblin = yes }
		}
		add_minority_with_correct_tolerance = { race = hobgoblin size = $size$ }

		remove_province_modifier = hobgoblin_majority_primary
		remove_province_modifier = hobgoblin_majority_integrated
		remove_province_modifier = hobgoblin_majority_coexisting
		remove_province_modifier = hobgoblin_majority_oppressed
	}

	#centaur
	else_if = {
		limit = {
			has_centaur_majority_trigger = yes
			NOT = { culture_is_centaur = yes }
		}
		add_minority_with_correct_tolerance = { race = centaur size = $size$ }

		remove_province_modifier = centaur_majority_primary
		remove_province_modifier = centaur_majority_integrated
		remove_province_modifier = centaur_majority_coexisting
		remove_province_modifier = centaur_majority_oppressed
	}

	#ogre
	else_if = {
		limit = {
			has_ogre_majority_trigger = yes
			NOT = { culture_is_ogre = yes }
		}
		add_minority_with_correct_tolerance = { race = ogre size = $size$ }

		remove_province_modifier = ogre_majority_primary
		remove_province_modifier = ogre_majority_integrated
		remove_province_modifier = ogre_majority_coexisting
		remove_province_modifier = ogre_majority_oppressed
	}

	#lizardfolk
	else_if = {
		limit = {
			has_lizardfolk_majority_trigger = yes
			NOT = { culture_is_lizardfolk = yes }
		}
		add_minority_with_correct_tolerance = { race = lizardfolk size = $size$ }

		remove_province_modifier = lizardfolk_majority_primary
		remove_province_modifier = lizardfolk_majority_integrated
		remove_province_modifier = lizardfolk_majority_coexisting
		remove_province_modifier = lizardfolk_majority_oppressed
	}
}


#This should be use in a province scope
update_racial_province_modifier_tolerance = {
	#AddNewRaceHere
	
	#Elven
	update_specific_racial_province_modifier_tolerance = { race = elven }

	#Dwarven
	update_specific_racial_province_modifier_tolerance = { race = dwarven }

	#Halfling
	update_specific_racial_province_modifier_tolerance = { race = halfling }

	#Gnomish
	update_specific_racial_province_modifier_tolerance = { race = gnomish }

	#Kobold
	update_specific_racial_province_modifier_tolerance = { race = kobold }

	#Orcish
	update_specific_racial_province_modifier_tolerance = { race = orcish }

	#Half-Orcish
	update_specific_racial_province_modifier_tolerance = { race = half_orcish }

	#Human
	update_specific_racial_province_modifier_tolerance = { race = human }

	#Gnollish
	update_specific_racial_province_modifier_tolerance = { race = gnollish }

	#Ruinborn
	update_specific_racial_province_modifier_tolerance = { race = ruinborn }

	#Goblin
	update_specific_racial_province_modifier_tolerance = { race = goblin }

	#Harpy
	update_specific_racial_province_modifier_tolerance = { race = harpy }

	#Troll
	update_specific_racial_province_modifier_tolerance = { race = troll }

	#Half-elven
	update_specific_racial_province_modifier_tolerance = { race = half_elven }

	#Harimari
	update_specific_racial_province_modifier_tolerance = { race = harimari }

	#Hobgoblin
	update_specific_racial_province_modifier_tolerance = { race = hobgoblin }

	#Centaur
	update_specific_racial_province_modifier_tolerance = { race = centaur }

	#Ogre
	update_specific_racial_province_modifier_tolerance = { race = ogre }

	#Lizardfolk
	update_specific_racial_province_modifier_tolerance = { race = lizardfolk }

}


#This should be use in a province scope
update_specific_racial_province_modifier_tolerance = { #$race$ = the race you're checking for

	# REB = { change_variable = { specificRacialTolerance = 1 } }
	
	if = {
		limit = {
			OR = {
				is_empty = yes # special case, newly emptied provinces need to be checked regardless of their "owners" "tolerance"
				has_unmatching_race_tolerance_trigger = { race = $race$ } # it may actually be faster to not check this at all and always do this given how many things this checks..
			}
		}

		#High Tolerance - Integrated
		if = {
			limit = {
				OR = {
					owner = { high_tolerance_$race$_race_trigger = yes }
					is_empty = yes
					# edge case, empty provinces will always have primary majority
				}
			}
			#High Tolerance - Small Minority
			if = {
				limit = {
					has_small_$race$_minority_trigger = yes
				}
				add_permanent_province_modifier = {
					name = $race$_minority_integrated_small
					duration = -1
				}
				remove_province_modifier = $race$_minority_oppressed_small
				remove_province_modifier = $race$_minority_coexisting_small
			}
			#High Tolerance - Large Minority
			else_if = {
				limit = {
					has_large_$race$_minority_trigger = yes
				}
				add_permanent_province_modifier = {
					name = $race$_minority_integrated_large
					duration = -1
				}
				remove_province_modifier = $race$_minority_oppressed_large
				remove_province_modifier = $race$_minority_coexisting_large
			}
			#High Tolerance - Majority
			else_if = {
				limit = {
					has_$race$_majority_trigger = yes
				}
				if = {
					limit = {
						OR = {
							is_empty = yes
							owner = { has_country_modifier = $race$_administration }
						}
					}
					# regardless of tolerance, if you have that races administration the majority is primary.
					# though you can have low tolerance of your own primary race,
					# the high_tolerance trigger will always be true if its your primary regardless of actual tolerance
					# additionally, if this is an empty province (i.e. uncolonised) the majority is primary
					add_permanent_province_modifier = {
						name = $race$_majority_primary
						duration = -1
					}
					remove_province_modifier = $race$_majority_integrated
				}
				else = {
					add_permanent_province_modifier = {
						name = $race$_majority_integrated
						duration = -1
					}
					remove_province_modifier = $race$_majority_primary
				}
				remove_province_modifier = $race$_majority_oppressed
				remove_province_modifier = $race$_majority_coexisting
			}
		}
		#Medium Tolerance - Coexisting
		else_if = {
			limit = { owner = { medium_tolerance_$race$_race_trigger = yes } }
			#Medium Tolerance - Small Minority
			if = {
				limit = {
					has_small_$race$_minority_trigger = yes
				}
				add_permanent_province_modifier = {
					name = $race$_minority_coexisting_small
					duration = -1
				}
				remove_province_modifier = $race$_minority_oppressed_small
				remove_province_modifier = $race$_minority_integrated_small
			}
			#Medium Tolerance - Large Minority
			else_if = {
				limit = {
					has_large_$race$_minority_trigger = yes
				}
				add_permanent_province_modifier = {
					name = $race$_minority_coexisting_large
					duration = -1
				}
				remove_province_modifier = $race$_minority_oppressed_large
				remove_province_modifier = $race$_minority_integrated_large
			}
			#Medium Tolerance - Majority
			else_if = {
				limit = {
					has_$race$_majority_trigger = yes
				}
				add_permanent_province_modifier = {
					name = $race$_majority_coexisting
					duration = -1
				}
				remove_province_modifier = $race$_majority_primary
				remove_province_modifier = $race$_majority_oppressed
				remove_province_modifier = $race$_majority_integrated
			}
		}
		#Low Tolerance - Oppressed
		else_if = {
			limit = { owner = { low_tolerance_$race$_race_trigger = yes } }
			#Low Tolerance - Small Minority
			if = {
				limit = {
					has_small_$race$_minority_trigger = yes
				}
				add_permanent_province_modifier = {
					name = $race$_minority_oppressed_small
					duration = -1
				}
				remove_province_modifier = $race$_minority_integrated_small
				remove_province_modifier = $race$_minority_coexisting_small
			}
			#Low Tolerance - Majority
			else_if = {
				limit = {
					has_large_$race$_minority_trigger = yes
				}
				add_permanent_province_modifier = {
					name = $race$_minority_oppressed_large
					duration = -1
				}
				remove_province_modifier = $race$_minority_integrated_large
				remove_province_modifier = $race$_minority_coexisting_large
			}
			#Low Tolerance - Majority
			else_if = {
				limit = {
					has_$race$_majority_trigger = yes
				}
				add_permanent_province_modifier = {
					name = $race$_majority_oppressed
					duration = -1
				}
				remove_province_modifier = $race$_majority_primary
				remove_province_modifier = $race$_majority_coexisting
				remove_province_modifier = $race$_majority_integrated
			}
		}
	}
}

update_racial_province_majority = {

	if = {
		limit = {
			OR = {
				is_colony = no
				is_capital = yes
				# stupid edge case - losing all your provs except a colony makes the province both the capital and a colony in on_capital_moved, and it doesn't trigger on_colony_finished
			}
		} # leave the old majority in new colonies until the colony is complete

		#Culture Conversion Removal Squad - turns the old majority into a large minority
		convert_majority_to_minority = { size = large }

		#Remove Purging and Expelling majority modifiers
		if = {
			limit = { has_province_modifier = purging_majority }
			remove_province_modifier = purging_majority
		}
		if = {
			limit = { has_province_modifier = expelling_majority }
			remove_province_modifier = expelling_majority
		}


		#Add Majorities to province
		add_majority_of_current_culture = yes
		
		#Grant the minority->majority bonus if they were a minority before
		cleanup_racial_province_minority_into_majority = yes
	}
}

cleanup_racial_province_minority_into_majority = {


	#AddNewRaceHere

	#dwarven
	if = {
		limit = {
			has_dwarven_minority_trigger = yes
			culture_is_dwarven = yes
		}

		if = {
			limit = { owner = { has_country_flag = save_minorities_for_migration } }
			# save whether it was large or small to restore later - yes this has to be done in a country flag because we have to keep the define to clear province flags on empty
			if = {
				limit = { has_small_dwarven_minority_trigger = yes }
				owner = { set_country_flag = migratory_small_minority }
			}
			else = {
				owner = { set_country_flag = migratory_large_minority }
			}
		}

		remove_province_modifier = dwarven_minority_oppressed_small
		remove_province_modifier = dwarven_minority_coexisting_small
		remove_province_modifier = dwarven_minority_integrated_small
		remove_province_modifier = dwarven_minority_oppressed_large
		remove_province_modifier = dwarven_minority_coexisting_large
		remove_province_modifier = dwarven_minority_integrated_large

		add_province_modifier = {
			name = minority_into_majority
			duration = 3650	#10 years
		}
	}

	#elven
	else_if = {
		limit = {
			has_elven_minority_trigger = yes
			culture_is_elven = yes
		}

		if = {
			limit = { owner = { has_country_flag = save_minorities_for_migration } }
			# save whether it was large or small to restore later - yes this has to be done in a country flag because we have to keep the define to clear province flags on empty
			if = {
				limit = { has_small_elven_minority_trigger = yes }
				owner = { set_country_flag = migratory_small_minority }
			}
			else = {
				owner = { set_country_flag = migratory_large_minority }
			}
		}

		remove_province_modifier = elven_minority_oppressed_small
		remove_province_modifier = elven_minority_coexisting_small
		remove_province_modifier = elven_minority_integrated_small
		remove_province_modifier = elven_minority_oppressed_large
		remove_province_modifier = elven_minority_coexisting_large
		remove_province_modifier = elven_minority_integrated_large

		add_province_modifier = {
			name = minority_into_majority
			duration = 3650	#10 years
		}
	}

	#halfling
	else_if = {
		limit = {
			has_halfling_minority_trigger = yes
			culture_is_halfling = yes	
		}
		
		if = {
			limit = { owner = { has_country_flag = save_minorities_for_migration } }
			# save whether it was large or small to restore later - yes this has to be done in a country flag because we have to keep the define to clear province flags on empty
			if = {
				limit = { has_small_halfling_minority_trigger = yes }
				owner = { set_country_flag = migratory_small_minority }
			}
			else = {
				owner = { set_country_flag = migratory_large_minority }
			}
		}
		
		remove_province_modifier = halfling_minority_oppressed_small
		remove_province_modifier = halfling_minority_coexisting_small
		remove_province_modifier = halfling_minority_integrated_small
		remove_province_modifier = halfling_minority_oppressed_large
		remove_province_modifier = halfling_minority_coexisting_large
		remove_province_modifier = halfling_minority_integrated_large

		add_province_modifier = {
			name = minority_into_majority
			duration = 3650	#10 years
		}
	}

	#gnomish
	else_if = {
		limit = {
			has_gnomish_minority_trigger = yes
			culture_is_gnomish = yes
		}

		if = {
			limit = { owner = { has_country_flag = save_minorities_for_migration } }
			# save whether it was large or small to restore later - yes this has to be done in a country flag because we have to keep the define to clear province flags on empty
			if = {
				limit = { has_small_gnomish_minority_trigger = yes }
				owner = { set_country_flag = migratory_small_minority }
			}
			else = {
				owner = { set_country_flag = migratory_large_minority }
			}
		}

		remove_province_modifier = gnomish_minority_oppressed_small
		remove_province_modifier = gnomish_minority_coexisting_small
		remove_province_modifier = gnomish_minority_integrated_small
		remove_province_modifier = gnomish_minority_oppressed_large
		remove_province_modifier = gnomish_minority_coexisting_large
		remove_province_modifier = gnomish_minority_integrated_large

		add_province_modifier = {
			name = minority_into_majority
			duration = 3650	#10 years
		}
	}

	#half_orcish
	else_if = {
		limit = {
			has_half_orcish_minority_trigger = yes
			culture_is_half_orcish = yes
		}

		if = {
			limit = { owner = { has_country_flag = save_minorities_for_migration } }
			# save whether it was large or small to restore later - yes this has to be done in a country flag because we have to keep the define to clear province flags on empty
			if = {
				limit = { has_small_half_orcish_minority_trigger = yes }
				owner = { set_country_flag = migratory_small_minority }
			}
			else = {
				owner = { set_country_flag = migratory_large_minority }
			}
		}

		remove_province_modifier = half_orcish_minority_oppressed_small
		remove_province_modifier = half_orcish_minority_coexisting_small
		remove_province_modifier = half_orcish_minority_integrated_small
		remove_province_modifier = half_orcish_minority_oppressed_large
		remove_province_modifier = half_orcish_minority_coexisting_large
		remove_province_modifier = half_orcish_minority_integrated_large

		add_province_modifier = {
			name = minority_into_majority
			duration = 3650	#10 years
		}
	}

	#kobold
	else_if = {
		limit = {
			has_kobold_minority_trigger = yes
			culture_is_kobold = yes
		}

		if = {
			limit = { owner = { has_country_flag = save_minorities_for_migration } }
			# save whether it was large or small to restore later - yes this has to be done in a country flag because we have to keep the define to clear province flags on empty
			if = {
				limit = { has_small_kobold_minority_trigger = yes }
				owner = { set_country_flag = migratory_small_minority }
			}
			else = {
				owner = { set_country_flag = migratory_large_minority }
			}
		}

		remove_province_modifier = kobold_minority_oppressed_small
		remove_province_modifier = kobold_minority_coexisting_small
		remove_province_modifier = kobold_minority_integrated_small
		remove_province_modifier = kobold_minority_oppressed_large
		remove_province_modifier = kobold_minority_coexisting_large
		remove_province_modifier = kobold_minority_integrated_large

		add_province_modifier = {
			name = minority_into_majority
			duration = 3650	#10 years
		}
	}

	#orcish
	else_if = {
		limit = {
			has_orcish_minority_trigger = yes
			culture_is_orcish = yes
		}

		if = {
			limit = { owner = { has_country_flag = save_minorities_for_migration } }
			# save whether it was large or small to restore later - yes this has to be done in a country flag because we have to keep the define to clear province flags on empty
			if = {
				limit = { has_small_orcish_minority_trigger = yes }
				owner = { set_country_flag = migratory_small_minority }
			}
			else = {
				owner = { set_country_flag = migratory_large_minority }
			}
		}

		remove_province_modifier = orcish_minority_oppressed_small
		remove_province_modifier = orcish_minority_coexisting_small
		remove_province_modifier = orcish_minority_integrated_small
		remove_province_modifier = orcish_minority_oppressed_large
		remove_province_modifier = orcish_minority_coexisting_large
		remove_province_modifier = orcish_minority_integrated_large

		add_province_modifier = {
			name = minority_into_majority
			duration = 3650	#10 years
		}
	}

	#human
	else_if = {
		limit = {
			has_human_minority_trigger = yes
			culture_is_human = yes
		}

		if = {
			limit = { owner = { has_country_flag = save_minorities_for_migration } }
			# save whether it was large or small to restore later - yes this has to be done in a country flag because we have to keep the define to clear province flags on empty
			if = {
				limit = { has_small_human_minority_trigger = yes }
				owner = { set_country_flag = migratory_small_minority }
			}
			else = {
				owner = { set_country_flag = migratory_large_minority }
			}
		}

		remove_province_modifier = human_minority_oppressed_small
		remove_province_modifier = human_minority_coexisting_small
		remove_province_modifier = human_minority_integrated_small
		remove_province_modifier = human_minority_oppressed_large
		remove_province_modifier = human_minority_coexisting_large
		remove_province_modifier = human_minority_integrated_large

		add_province_modifier = {
			name = minority_into_majority
			duration = 3650	#10 years
		}
	}

	#gnollish
	else_if = {
		limit = {
			has_gnollish_minority_trigger = yes
			culture_is_gnollish = yes
		}

		if = {
			limit = { owner = { has_country_flag = save_minorities_for_migration } }
			# save whether it was large or small to restore later - yes this has to be done in a country flag because we have to keep the define to clear province flags on empty
			if = {
				limit = { has_small_gnollish_minority_trigger = yes }
				owner = { set_country_flag = migratory_small_minority }
			}
			else = {
				owner = { set_country_flag = migratory_large_minority }
			}
		}

		remove_province_modifier = gnollish_minority_oppressed_small
		remove_province_modifier = gnollish_minority_coexisting_small
		remove_province_modifier = gnollish_minority_integrated_small
		remove_province_modifier = gnollish_minority_oppressed_large
		remove_province_modifier = gnollish_minority_coexisting_large
		remove_province_modifier = gnollish_minority_integrated_large

		add_province_modifier = {
			name = minority_into_majority
			duration = 3650	#10 years
		}
	}

	#ruinborn
	else_if = {
		limit = {
			has_ruinborn_minority_trigger = yes
			culture_is_ruinborn = yes
		}

		if = {
			limit = { owner = { has_country_flag = save_minorities_for_migration } }
			# save whether it was large or small to restore later - yes this has to be done in a country flag because we have to keep the define to clear province flags on empty
			if = {
				limit = { has_small_ruinborn_minority_trigger = yes }
				owner = { set_country_flag = migratory_small_minority }
			}
			else = {
				owner = { set_country_flag = migratory_large_minority }
			}
		}

		remove_province_modifier = ruinborn_minority_oppressed_small
		remove_province_modifier = ruinborn_minority_coexisting_small
		remove_province_modifier = ruinborn_minority_integrated_small
		remove_province_modifier = ruinborn_minority_oppressed_large
		remove_province_modifier = ruinborn_minority_coexisting_large
		remove_province_modifier = ruinborn_minority_integrated_large

		add_province_modifier = {
			name = minority_into_majority
			duration = 3650	#10 years
		}
	}

	#goblin
	else_if = {
		limit = {
			has_goblin_minority_trigger = yes
			culture_is_goblin = yes
		}

		if = {
			limit = { owner = { has_country_flag = save_minorities_for_migration } }
			# save whether it was large or small to restore later - yes this has to be done in a country flag because we have to keep the define to clear province flags on empty
			if = {
				limit = { has_small_goblin_minority_trigger = yes }
				owner = { set_country_flag = migratory_small_minority }
			}
			else = {
				owner = { set_country_flag = migratory_large_minority }
			}
		}

		remove_province_modifier = goblin_minority_oppressed_small
		remove_province_modifier = goblin_minority_coexisting_small
		remove_province_modifier = goblin_minority_integrated_small
		remove_province_modifier = goblin_minority_oppressed_large
		remove_province_modifier = goblin_minority_coexisting_large
		remove_province_modifier = goblin_minority_integrated_large

		add_province_modifier = {
			name = minority_into_majority
			duration = 3650	#10 years
		}
	}

	#harpy
	else_if = {
		limit = {
			has_harpy_minority_trigger = yes
			culture_is_harpy = yes
		}

		if = {
			limit = { owner = { has_country_flag = save_minorities_for_migration } }
			# save whether it was large or small to restore later - yes this has to be done in a country flag because we have to keep the define to clear province flags on empty
			if = {
				limit = { has_small_harpy_minority_trigger = yes }
				owner = { set_country_flag = migratory_small_minority }
			}
			else = {
				owner = { set_country_flag = migratory_large_minority }
			}
		}

		remove_province_modifier = harpy_minority_oppressed_small
		remove_province_modifier = harpy_minority_coexisting_small
		remove_province_modifier = harpy_minority_integrated_small
		remove_province_modifier = harpy_minority_oppressed_large
		remove_province_modifier = harpy_minority_coexisting_large
		remove_province_modifier = harpy_minority_integrated_large

		add_province_modifier = {
			name = minority_into_majority
			duration = 3650	#10 years
		}
	}

	#troll
	else_if = {
		limit = {
			has_troll_minority_trigger = yes
			culture_is_troll = yes
		}
		
		if = {
			limit = { owner = { has_country_flag = save_minorities_for_migration } }
			# save whether it was large or small to restore later - yes this has to be done in a country flag because we have to keep the define to clear province flags on empty
			if = {
				limit = { has_small_troll_minority_trigger = yes }
				owner = { set_country_flag = migratory_small_minority }
			}
			else = {
				owner = { set_country_flag = migratory_large_minority }
			}
		}	
		
		remove_province_modifier = troll_minority_oppressed_small
		remove_province_modifier = troll_minority_coexisting_small
		remove_province_modifier = troll_minority_integrated_small
		remove_province_modifier = troll_minority_oppressed_large
		remove_province_modifier = troll_minority_coexisting_large
		remove_province_modifier = troll_minority_integrated_large

		add_province_modifier = {
			name = minority_into_majority
			duration = 3650	#10 years
		}
	}

	#half_elven
	else_if = {
		limit = {
			has_half_elven_minority_trigger = yes
			culture_is_half_elven = yes
		}

		if = {
			limit = { owner = { has_country_flag = save_minorities_for_migration } }
			# save whether it was large or small to restore later - yes this has to be done in a country flag because we have to keep the define to clear province flags on empty
			if = {
				limit = { has_small_half_elven_minority_trigger = yes }
				owner = { set_country_flag = migratory_small_minority }
			}
			else = {
				owner = { set_country_flag = migratory_large_minority }
			}
		}

		remove_province_modifier = half_elven_minority_oppressed_small
		remove_province_modifier = half_elven_minority_coexisting_small
		remove_province_modifier = half_elven_minority_integrated_small
		remove_province_modifier = half_elven_minority_oppressed_large
		remove_province_modifier = half_elven_minority_coexisting_large
		remove_province_modifier = half_elven_minority_integrated_large

		add_province_modifier = {
			name = minority_into_majority
			duration = 3650	#10 years
		}
	}

	#harimari
	else_if = {
		limit = {
			has_harimari_minority_trigger = yes
			culture_is_harimari = yes
		}

		if = {
			limit = { owner = { has_country_flag = save_minorities_for_migration } }
			# save whether it was large or small to restore later - yes this has to be done in a country flag because we have to keep the define to clear province flags on empty
			if = {
				limit = { has_small_harimari_minority_trigger = yes }
				owner = { set_country_flag = migratory_small_minority }
			}
			else = {
				owner = { set_country_flag = migratory_large_minority }
			}
		}

		remove_province_modifier = harimari_minority_oppressed_small
		remove_province_modifier = harimari_minority_coexisting_small
		remove_province_modifier = harimari_minority_integrated_small
		remove_province_modifier = harimari_minority_oppressed_large
		remove_province_modifier = harimari_minority_coexisting_large
		remove_province_modifier = harimari_minority_integrated_large

		add_province_modifier = {
			name = minority_into_majority
			duration = 3650	#10 years
		}
	}

	#hobgoblin
	else_if = {
		limit = {
			has_hobgoblin_minority_trigger = yes
			culture_is_hobgoblin = yes
		}

		if = {
			limit = { owner = { has_country_flag = save_minorities_for_migration } }
			# save whether it was large or small to restore later - yes this has to be done in a country flag because we have to keep the define to clear province flags on empty
			if = {
				limit = { has_small_hobgoblin_minority_trigger = yes }
				owner = { set_country_flag = migratory_small_minority }
			}
			else = {
				owner = { set_country_flag = migratory_large_minority }
			}
		}

		remove_province_modifier = hobgoblin_minority_oppressed_small
		remove_province_modifier = hobgoblin_minority_coexisting_small
		remove_province_modifier = hobgoblin_minority_integrated_small
		remove_province_modifier = hobgoblin_minority_oppressed_large
		remove_province_modifier = hobgoblin_minority_coexisting_large
		remove_province_modifier = hobgoblin_minority_integrated_large

		add_province_modifier = {
			name = minority_into_majority
			duration = 3650	#10 years
		}
	}

	#centaur
	else_if = {
		limit = {
			has_centaur_minority_trigger = yes
			culture_is_centaur = yes
		}

		if = {
			limit = { owner = { has_country_flag = save_minorities_for_migration } }
			# save whether it was large or small to restore later - yes this has to be done in a country flag because we have to keep the define to clear province flags on empty
			if = {
				limit = { has_small_centaur_minority_trigger = yes }
				owner = { set_country_flag = migratory_small_minority }
			}
			else = {
				owner = { set_country_flag = migratory_large_minority }
			}
		}

		remove_province_modifier = centaur_minority_oppressed_small
		remove_province_modifier = centaur_minority_coexisting_small
		remove_province_modifier = centaur_minority_integrated_small
		remove_province_modifier = centaur_minority_oppressed_large
		remove_province_modifier = centaur_minority_coexisting_large
		remove_province_modifier = centaur_minority_integrated_large

		add_province_modifier = {
			name = minority_into_majority
			duration = 3650	#10 years
		}
	}

	#ogre
	else_if = {
		limit = {
			has_ogre_minority_trigger = yes
			culture_is_ogre = yes
		}

		if = {
			limit = { owner = { has_country_flag = save_minorities_for_migration } }
			# save whether it was large or small to restore later - yes this has to be done in a country flag because we have to keep the define to clear province flags on empty
			if = {
				limit = { has_small_ogre_minority_trigger = yes }
				owner = { set_country_flag = migratory_small_minority }
			}
			else = {
				owner = { set_country_flag = migratory_large_minority }
			}
		}

		remove_province_modifier = ogre_minority_oppressed_small
		remove_province_modifier = ogre_minority_coexisting_small
		remove_province_modifier = ogre_minority_integrated_small
		remove_province_modifier = ogre_minority_oppressed_large
		remove_province_modifier = ogre_minority_coexisting_large
		remove_province_modifier = ogre_minority_integrated_large

		add_province_modifier = {
			name = minority_into_majority
			duration = 3650	#10 years
		}
	}

	#lizardfolk
	else_if = {
		limit = {
			has_lizardfolk_minority_trigger = yes
			culture_is_lizardfolk = yes
		}

		if = {
			limit = { owner = { has_country_flag = save_minorities_for_migration } }
			# save whether it was large or small to restore later - yes this has to be done in a country flag because we have to keep the define to clear province flags on empty
			if = {
				limit = { has_small_lizardfolk_minority_trigger = yes }
				owner = { set_country_flag = migratory_small_minority }
			}
			else = {
				owner = { set_country_flag = migratory_large_minority }
			}
		}

		remove_province_modifier = lizardfolk_minority_oppressed_small
		remove_province_modifier = lizardfolk_minority_coexisting_small
		remove_province_modifier = lizardfolk_minority_integrated_small
		remove_province_modifier = lizardfolk_minority_oppressed_large
		remove_province_modifier = lizardfolk_minority_coexisting_large
		remove_province_modifier = lizardfolk_minority_integrated_large

		add_province_modifier = {
			name = minority_into_majority
			duration = 3650	#10 years
		}
	}
}

make_majority_primary = {
	#AddNewRaceHere

	#dwarven
	if = {
		limit = {
			has_province_modifier = dwarven_majority_integrated
			owner = { has_country_modifier = dwarven_administration }
		}
		remove_province_modifier = dwarven_majority_integrated

		add_permanent_province_modifier = {
			name = dwarven_majority_primary
			duration = -1
		}
	}

	#elven
	else_if = {
		limit = {
			has_province_modifier = elven_majority_integrated
			owner = { has_country_modifier = elven_administration }
		}
		remove_province_modifier = elven_majority_integrated

		add_permanent_province_modifier = {
			name = elven_majority_primary
			duration = -1
		}
	}

	#halfling
	else_if = {
		limit = {
			has_province_modifier = halfling_majority_integrated
			owner = { has_country_modifier = halfling_administration }
		}
		remove_province_modifier = halfling_majority_integrated

		add_permanent_province_modifier = {
			name = halfling_majority_primary
			duration = -1
		}
	}

	#gnomish
	else_if = {
		limit = {
			has_province_modifier = gnomish_majority_integrated
			owner = { has_country_modifier = gnomish_administration }
		}
		remove_province_modifier = gnomish_majority_integrated

		add_permanent_province_modifier = {
			name = gnomish_majority_primary
			duration = -1
		}
	}

	#half_orcish
	else_if = {
		limit = {
			has_province_modifier = half_orcish_majority_integrated
			owner = { has_country_modifier = half_orcish_administration }
		}
		remove_province_modifier = half_orcish_majority_integrated

		add_permanent_province_modifier = {
			name = half_orcish_majority_primary
			duration = -1
		}
	}

	#kobold
	else_if = {
		limit = {
			has_province_modifier = kobold_majority_integrated
			owner = { has_country_modifier = kobold_administration }
		}
		remove_province_modifier = kobold_majority_integrated

		add_permanent_province_modifier = {
			name = kobold_majority_primary
			duration = -1
		}
	}

	#orcish
	else_if = {
		limit = {
			has_province_modifier = orcish_majority_integrated
			owner = { has_country_modifier = orcish_administration }
		}
		remove_province_modifier = orcish_majority_integrated

		add_permanent_province_modifier = {
			name = orcish_majority_primary
			duration = -1
		}
	}

	#human
	else_if = {
		limit = {
			has_province_modifier = human_majority_integrated
			owner = { has_country_modifier = human_administration }
		}
		remove_province_modifier = human_majority_integrated

		add_permanent_province_modifier = {
			name = human_majority_primary
			duration = -1
		}
	}

	#gnollish
	else_if = {
		limit = {
			has_province_modifier = gnollish_majority_integrated
			owner = { has_country_modifier = gnollish_administration }
		}
		remove_province_modifier = gnollish_majority_integrated

		add_permanent_province_modifier = {
			name = gnollish_majority_primary
			duration = -1
		}
	}

	#ruinborn
	else_if = {
		limit = {
			has_province_modifier = ruinborn_majority_integrated
			owner = { has_country_modifier = ruinborn_administration }
		}
		remove_province_modifier = ruinborn_majority_integrated

		add_permanent_province_modifier = {
			name = ruinborn_majority_primary
			duration = -1
		}
	}

	#goblin
	else_if = {
		limit = {
			has_province_modifier = goblin_majority_integrated
			owner = { has_country_modifier = goblin_administration }
		}
		remove_province_modifier = goblin_majority_integrated

		add_permanent_province_modifier = {
			name = goblin_majority_primary
			duration = -1
		}
	}

	#harpy
	else_if = {
		limit = {
			has_province_modifier = harpy_majority_integrated
			owner = { has_country_modifier = harpy_administration }
		}
		remove_province_modifier = harpy_majority_integrated

		add_permanent_province_modifier = {
			name = harpy_majority_primary
			duration = -1
		}
	}

	#troll
	else_if = {
		limit = {
			has_province_modifier = troll_majority_integrated
			owner = { has_country_modifier = troll_administration }
		}
		remove_province_modifier = troll_majority_integrated

		add_permanent_province_modifier = {
			name = troll_majority_primary
			duration = -1
		}
	}

	#half_elven
	else_if = {
		limit = {
			has_province_modifier = half_elven_majority_integrated
			owner = { has_country_modifier = half_elven_administration }
		}
		remove_province_modifier = half_elven_majority_integrated

		add_permanent_province_modifier = {
			name = half_elven_majority_primary
			duration = -1
		}
	}

	#harimari
	else_if = {
		limit = {
			has_province_modifier = harimari_majority_integrated
			owner = { has_country_modifier = harimari_administration }
		}
		remove_province_modifier = harimari_majority_integrated

		add_permanent_province_modifier = {
			name = harimari_majority_primary
			duration = -1
		}
	}

	#hobgoblin
	else_if = {
		limit = {
			has_province_modifier = hobgoblin_majority_integrated
			owner = { has_country_modifier = hobgoblin_administration }
		}
		remove_province_modifier = hobgoblin_majority_integrated

		add_permanent_province_modifier = {
			name = hobgoblin_majority_primary
			duration = -1
		}
	}

	#centaur
	else_if = {
		limit = {
			has_province_modifier = centaur_majority_integrated
			owner = { has_country_modifier = centaur_administration }
		}
		remove_province_modifier = centaur_majority_integrated

		add_permanent_province_modifier = {
			name = centaur_majority_primary
			duration = -1
		}
	}

	#ogre
	else_if = {
		limit = {
			has_province_modifier = ogre_majority_integrated
			owner = { has_country_modifier = ogre_administration }
		}
		remove_province_modifier = ogre_majority_integrated

		add_permanent_province_modifier = {
			name = ogre_majority_primary
			duration = -1
		}
	}

	#lizardfolk
	else_if = {
		limit = {
			has_province_modifier = lizardfolk_majority_integrated
			owner = { has_country_modifier = lizardfolk_administration }
		}
		remove_province_modifier = lizardfolk_majority_integrated

		add_permanent_province_modifier = {
			name = lizardfolk_majority_primary
			duration = -1
		}
	}
}

#----# Scripted effects for pop menu #----#
pop_menu_main_setup = {
	pop_menu_calculations = yes
	set_variable = { which = centaurRanking value = 1 }
	set_variable = { which = dwarvenRanking value = 2 }
	set_variable = { which = elvenRanking value = 3 }
	set_variable = { which = gnollishRanking value = 4 }
	set_variable = { which = gnomishRanking value = 5 }
	set_variable = { which = goblinRanking value = 6 }
	set_variable = { which = halflingRanking value = 7 }
	set_variable = { which = half_elvenRanking value = 8 }
	set_variable = { which = half_orcishRanking value = 9 }
	set_variable = { which = harimariRanking value = 10 }
	set_variable = { which = harpyRanking value = 11 }
	set_variable = { which = hobgoblinRanking value = 12 }
	set_variable = { which = humanRanking value = 13 }
	set_variable = { which = koboldRanking value = 14 }
	set_variable = { which = lizardfolkRanking value = 15 }
	set_variable = { which = ogreRanking value = 16 }
	set_variable = { which = orcishRanking value = 17 }
	set_variable = { which = ruinbornRanking value = 18 }
	set_variable = { which = trollRanking value = 19 }
	pop_menu_main_sorting_effect = yes
}

pop_menu_calculations = {
	set_variable = { which = nbcentaurMajority value = 0 }
	set_variable = { which = nbcentaurMinority value = 0 }
	set_variable = { which = nbcentaurDev value = 0 }
	set_variable = { which = nbdwarvenMajority value = 0 }
	set_variable = { which = nbdwarvenMinority value = 0 }
	set_variable = { which = nbdwarvenDev value = 0 }
	set_variable = { which = nbelvenMajority value = 0 }
	set_variable = { which = nbelvenMinority value = 0 }
	set_variable = { which = nbelvenDev value = 0 }
	set_variable = { which = nbgnollishMajority value = 0 }
	set_variable = { which = nbgnollishMinority value = 0 }
	set_variable = { which = nbgnollishDev value = 0 }
	set_variable = { which = nbgnomishMajority value = 0 }
	set_variable = { which = nbgnomishMinority value = 0 }
	set_variable = { which = nbgnomishDev value = 0 }
	set_variable = { which = nbgoblinMajority value = 0 }
	set_variable = { which = nbgoblinMinority value = 0 }
	set_variable = { which = nbgoblinDev value = 0 }
	set_variable = { which = nbhalflingMajority value = 0 }
	set_variable = { which = nbhalflingMinority value = 0 }
	set_variable = { which = nbhalflingDev value = 0 }
	set_variable = { which = nbhalf_elvenMajority value = 0 }
	set_variable = { which = nbhalf_elvenMinority value = 0 }
	set_variable = { which = nbhalf_elvenDev value = 0 }
	set_variable = { which = nbhalf_orcishMajority value = 0 }
	set_variable = { which = nbhalf_orcishMinority value = 0 }
	set_variable = { which = nbhalf_orcishDev value = 0 }
	set_variable = { which = nbharimariMajority value = 0 }
	set_variable = { which = nbharimariMinority value = 0 }
	set_variable = { which = nbharimariDev value = 0 }
	set_variable = { which = nbharpyMajority value = 0 }
	set_variable = { which = nbharpyMinority value = 0 }
	set_variable = { which = nbharpyDev value = 0 }
	set_variable = { which = nbhobgoblinMajority value = 0 }
	set_variable = { which = nbhobgoblinMinority value = 0 }
	set_variable = { which = nbhobgoblinDev value = 0 }
	set_variable = { which = nbhumanMajority value = 0 }
	set_variable = { which = nbhumanMinority value = 0 }
	set_variable = { which = nbhumanDev value = 0 }
	set_variable = { which = nbkoboldMajority value = 0 }
	set_variable = { which = nbkoboldMinority value = 0 }
	set_variable = { which = nbkoboldDev value = 0 }
	set_variable = { which = nblizardfolkMajority value = 0 }
	set_variable = { which = nblizardfolkMinority value = 0 }
	set_variable = { which = nblizardfolkDev value = 0 }
	# set_variable = { which = nbmechanismMajority value = 0 }
	# set_variable = { which = nbmechanismMinority value = 0 }
	# set_variable = { which = nbmechanismDev value = 0 }
	set_variable = { which = nbogreMajority value = 0 }
	set_variable = { which = nbogreMinority value = 0 }
	set_variable = { which = nbogreDev value = 0 }
	set_variable = { which = nborcishMajority value = 0 }
	set_variable = { which = nborcishMinority value = 0 }
	set_variable = { which = nborcishDev value = 0 }
	set_variable = { which = nbruinbornMajority value = 0 }
	set_variable = { which = nbruinbornMinority value = 0 }
	set_variable = { which = nbruinbornDev value = 0 }
	set_variable = { which = nbtrollMajority value = 0 }
	set_variable = { which = nbtrollMinority value = 0 }
	set_variable = { which = nbttrollDev value = 0 }

	#every_owned_province = {
	#	[[cored]
	#		limit = {
	#			is_state = yes
	#			is_state_core = ROOT
	#		}
	#	]
	# 1.35 TODO - originally every_owned_province,
	# this errors (but not as badly as the other scripted effect - see below)
	# (yes, they broke every_owned_province again)
	every_core_province = {
		limit = {
			owned_by = ROOT
			[[cored]
			is_state = yes
			is_state_core = ROOT
			]
		}
		calculate_province_race_values = { RACE = centaur }
		calculate_province_race_values = { RACE = dwarven }
		calculate_province_race_values = { RACE = elven }
		calculate_province_race_values = { RACE = gnollish }
		calculate_province_race_values = { RACE = gnomish }
		calculate_province_race_values = { RACE = goblin }
		calculate_province_race_values = { RACE = halfling }
		calculate_province_race_values = { RACE = half_elven }
		calculate_province_race_values = { RACE = half_orcish }
		calculate_province_race_values = { RACE = harimari }
		calculate_province_race_values = { RACE = harpy }
		calculate_province_race_values = { RACE = hobgoblin }
		calculate_province_race_values = { RACE = human }
		calculate_province_race_values = { RACE = kobold }
		calculate_province_race_values = { RACE = lizardfolk }
		# calculate_province_race_values = { RACE = mechanim }
		calculate_province_race_values = { RACE = ogre }
		calculate_province_race_values = { RACE = orcish }
		calculate_province_race_values = { RACE = ruinborn }
		calculate_province_race_values = { RACE = troll }
	}

	set_variable = { which = nbTotalDev which = nbcentaurDev }
	change_variable = { which = nbTotalDev which = nbdwarvenDev }
	change_variable = { which = nbTotalDev which = nbelvenDev }
	change_variable = { which = nbTotalDev which = nbgoblinDev }
	change_variable = { which = nbTotalDev which = nbgnollishDev }
	change_variable = { which = nbTotalDev which = nbgnomishDev }
	change_variable = { which = nbTotalDev which = nbhalflingDev }
	change_variable = { which = nbTotalDev which = nbhalf_elvenDev }
	change_variable = { which = nbTotalDev which = nbhalf_orcishDev }
	change_variable = { which = nbTotalDev which = nbharimariDev }
	change_variable = { which = nbTotalDev which = nbharpyDev }
	change_variable = { which = nbTotalDev which = nbhobgoblinDev }
	change_variable = { which = nbTotalDev which = nbhumanDev }
	change_variable = { which = nbTotalDev which = nbkoboldDev }
	change_variable = { which = nbTotalDev which = nblizardfolkDev }
	# change_variable = { which = nbTotalDev which = nbmechanimDev }
	change_variable = { which = nbTotalDev which = nbogreDev }
	change_variable = { which = nbTotalDev which = nborcishDev }
	change_variable = { which = nbTotalDev which = nbruinbornDev }
	change_variable = { which = nbTotalDev which = nbtrollDev }

	pop_menu_round_and_percent = { which = nbcentaurDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbdwarvenDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbelvenDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbgnollishDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbgnomishDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbgoblinDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbhalflingDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbhalf_elvenDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbhalf_orcishDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbharimariDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbharpyDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbhobgoblinDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbhumanDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbkoboldDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nblizardfolkDev total = nbTotalDev }
	# pop_menu_round_and_percent = { which = nbmechanimDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nborcishDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbogreDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbruinbornDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbtrollDev total = nbTotalDev }
}

calculate_province_race_values = {
	if = { limit = { has_$RACE$_majority_trigger = yes }
		export_to_variable = { which = nb$RACE$Dev value = development }
		ROOT = {
			change_variable = { which = nb$RACE$Dev which = PREV }
			change_variable = { which = nb$RACE$Majority value = 1 }
		}
	}
	else_if = { limit = { has_small_$RACE$_minority_trigger = yes }
		export_to_variable = { which = nb$RACE$Dev value = development }
		multiply_variable = { which = nb$RACE$Dev value = 0.05 }
		ROOT = {
			change_variable = { which = nb$RACE$Dev which = PREV }
   			change_variable = { which = nb$RACE$Minority value = 1 }
		}
	}
	else_if = { limit = { has_large_$RACE$_minority_trigger = yes }
		export_to_variable = { which = nb$RACE$Dev value = development }
		multiply_variable = { which = nb$RACE$Dev value = 0.1 }
		ROOT = {
			change_variable = { which = nb$RACE$Dev which = PREV }
   			change_variable = { which = nb$RACE$Minority value = 1 }
		}
	}
}

pop_menu_round_and_percent = {
	divide_variable = { which = $which$ which = $total$ }
	if = { limit = { check_variable = { which = $which$ value = 0.01 } }
		set_variable = { which = temp which = $which$ }
		multiply_variable = { which = temp value = 100 }
		divide_variable = { which = $which$ value = 10 }
		multiply_variable = { which = $which$ value = 1000 }
		subtract_variable = { which = temp which = $which$ }
		if = { limit = { check_variable = { which = temp value = 0.5 } }
			change_variable = { which = $which$ value = 1 }
		}
	}
	else = {
		multiply_variable = { which = $which$ value = 100 }
	}
}

pop_menu_main_sorting_effect = {
	19 = { set_variable = { which = nbcentaurDev which = PREV } set_variable = { which = nbRaceDev which = nbcentaurDev } set_province_flag = not_sorted }
	18 = { set_variable = { which = nbdwarvenDev which = PREV } set_variable = { which = nbRaceDev which = nbdwarvenDev } set_province_flag = not_sorted }
	17 = { set_variable = { which = nbelvenDev which = PREV } set_variable = { which = nbRaceDev which = nbelvenDev } set_province_flag = not_sorted }
	16 = { set_variable = { which = nbgnollishDev which = PREV } set_variable = { which = nbRaceDev which = nbgnollishDev } set_province_flag = not_sorted }
	15 = { set_variable = { which = nbgnomishDev which = PREV } set_variable = { which = nbRaceDev which = nbgnomishDev } set_province_flag = not_sorted }
	14 = { set_variable = { which = nbgoblinDev which = PREV } set_variable = { which = nbRaceDev which = nbgoblinDev } set_province_flag = not_sorted }
	13 = { set_variable = { which = nbhalf_elvenDev which = PREV } set_variable = { which = nbRaceDev which = nbhalf_elvenDev } set_province_flag = not_sorted }
	12 = { set_variable = { which = nbhalf_orcishDev which = PREV } set_variable = { which = nbRaceDev which = nbhalf_orcishDev } set_province_flag = not_sorted }
	11 = { set_variable = { which = nbhalflingDev which = PREV } set_variable = { which = nbRaceDev which = nbhalflingDev } set_province_flag = not_sorted }
	10 = { set_variable = { which = nbharimariDev which = PREV } set_variable = { which = nbRaceDev which = nbharimariDev } set_province_flag = not_sorted }
	9 = { set_variable = { which = nbharpyDev which = PREV } set_variable = { which = nbRaceDev which = nbharpyDev } set_province_flag = not_sorted }
	8 = { set_variable = { which = nbhobgoblinDev which = PREV } set_variable = { which = nbRaceDev which = nbhobgoblinDev } set_province_flag = not_sorted }
	7 = { set_variable = { which = nbhumanDev which = PREV } set_variable = { which = nbRaceDev which = nbhumanDev } set_province_flag = not_sorted }
	6 = { set_variable = { which = nbkoboldDev which = PREV } set_variable = { which = nbRaceDev which = nbkoboldDev } set_province_flag = not_sorted }
	5 = { set_variable = { which = nblizardfolkDev which = PREV } set_variable = { which = nbRaceDev which = nblizardfolkDev } set_province_flag = not_sorted }
	4 = { set_variable = { which = nbogreDev which = PREV } set_variable = { which = nbRaceDev which = nbogreDev } set_province_flag = not_sorted }
	3 = { set_variable = { which = nborcishDev which = PREV } set_variable = { which = nbRaceDev which = nborcishDev } set_province_flag = not_sorted }
	2 = { set_variable = { which = nbruinbornDev which = PREV } set_variable = { which = nbRaceDev which = nbruinbornDev } set_province_flag = not_sorted }
	1 = { set_variable = { which = nbtrollDev which = PREV } set_variable = { which = nbRaceDev which = nbtrollDev } set_province_flag = not_sorted }

	set_variable = { which = raceRanking value = 0 }
	2 = { save_event_target_as = most_represented_race }

	while = { limit = { NOT = { check_variable = { which = raceRanking value = 19 } } }	#19 = nb of races
		change_variable = { which = raceRanking value = 1 }
		pop_menu_variables = {	#province group that has all the provinces with stored variables
			limit = {
				has_province_flag = not_sorted
				check_variable = { which = nbRaceDev which = event_target:most_represented_race }
			}
			save_event_target_as = most_represented_race
		}
		event_target:most_represented_race = {
			clr_province_flag = not_sorted
			pop_ranking_conversion = yes
			set_variable = { which = nbRaceDev value = 0 }
		}
	}
}

pop_ranking_conversion = {
	if = { limit = { province_id = 19 } ROOT = { set_variable = { which = centaurRanking which = raceRanking } } }
	else_if = { limit = { province_id = 18 } ROOT = { set_variable = { which = dwarvenRanking which = raceRanking } } }
	else_if = { limit = { province_id = 17 } ROOT = { set_variable = { which = elvenRanking which = raceRanking } } }
	else_if = { limit = { province_id = 16 } ROOT = { set_variable = { which = gnollishRanking which = raceRanking } } }
	else_if = { limit = { province_id = 15 } ROOT = { set_variable = { which = gnomishRanking which = raceRanking } } }
	else_if = { limit = { province_id = 14 } ROOT = { set_variable = { which = goblinRanking which = raceRanking } } }
	else_if = { limit = { province_id = 13 } ROOT = { set_variable = { which = half_elvenRanking which = raceRanking } } }
	else_if = { limit = { province_id = 12 } ROOT = { set_variable = { which = half_orcishRanking which = raceRanking } } }
	else_if = { limit = { province_id = 11 } ROOT = { set_variable = { which = halflingRanking which = raceRanking } } }
	else_if = { limit = { province_id = 10 } ROOT = { set_variable = { which = harimariRanking which = raceRanking } } }
	else_if = { limit = { province_id = 9 } ROOT = { set_variable = { which = harpyRanking which = raceRanking } } }
	else_if = { limit = { province_id = 8 } ROOT = { set_variable = { which = hobgoblinRanking which = raceRanking } } }
	else_if = { limit = { province_id = 7 } ROOT = { set_variable = { which = humanRanking which = raceRanking } } }
	else_if = { limit = { province_id = 6 } ROOT = { set_variable = { which = koboldRanking which = raceRanking } } }
	else_if = { limit = { province_id = 5 } ROOT = { set_variable = { which = lizardfolkRanking which = raceRanking } } }
	else_if = { limit = { province_id = 4 } ROOT = { set_variable = { which = ogreRanking which = raceRanking } } }
	else_if = { limit = { province_id = 3 } ROOT = { set_variable = { which = orcishRanking which = raceRanking } } }
	else_if = { limit = { province_id = 2 } ROOT = { set_variable = { which = ruinbornRanking which = raceRanking } } }
	else_if = { limit = { province_id = 1 } ROOT = { set_variable = { which = trollRanking which = raceRanking } } }
}

pop_menu_rank_effect = {
	pop_menu_race_selected_effect = { RACE = centaur ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = dwarven ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = elven ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = gnollish ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = gnomish ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = goblin ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = halfling ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = half_elven ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = half_orcish ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = harimari ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = harpy ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = hobgoblin ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = human ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = kobold ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = lizardfolk ORDER = $ORDER$ }
	# pop_menu_race_selected_effect = { RACE = mechanim ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = ogre ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = orcish ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = ruinborn ORDER = $ORDER$ }
	pop_menu_race_selected_effect = { RACE = troll ORDER = $ORDER$ }
}

pop_menu_race_selected_effect = {
	if = { limit = { is_variable_equal = { which = $RACE$Ranking value = $ORDER$ } }
		custom_tooltip = pop_menu_$RACE$_tt
		hidden_effect = {
			pop_menu_cored_dev_calculations = { RACE = $RACE$ }
			country_event = { id = racial_pop_events_$RACE$.12 }
		}
	}
}

pop_menu_cored_dev_calculations = {
	set_variable = { which = nbRaceCoredDev value = 0 }
	set_variable = { which = nbTotalCoredDev value = 0 }

	# 1.35 TODO - originally every_owned_province,
	# that spams errors incredibly fast and forever while hovering buttons in the province menu
	# easily reaching many megabytes of errors in seconds - thus, this
	# (yes, they broke every_owned_province again)
	every_core_province = {
		limit = {
			owned_by = ROOT
			is_state = yes
			is_state_core = ROOT
		}

		export_to_variable = { which = nbTotalCoredDev value = development }
		export_to_variable = { which = nbRaceCoredDev value = development }

		if = { limit = { has_$RACE$_majority_trigger = yes }
			ROOT = { change_variable = { which = nbRaceCoredDev which = PREV } }
		}
		else_if = { limit = { has_small_$RACE$_minority_trigger = yes }
			multiply_variable = { which = nbRaceCoredDev value = 0.05 }
			ROOT = { change_variable = { which = nbRaceCoredDev which = PREV } }
		}
		else_if = { limit = { has_large_$RACE$_minority_trigger = yes }
			multiply_variable = { which = nbRaceCoredDev value = 0.1 }
			ROOT = { change_variable = { which = nbRaceCoredDev which = PREV } }
		}

		pop_menu_cored_minorities_calculations = yes

		ROOT = {
			change_variable = { which = nbTotalCoredDev which = PREV }
			change_variable = { which = nbTotalCoredDev which = nbMinorityCoredDev }
		}
	}

	pop_menu_round_and_percent = { which = nbRaceCoredDev total = nbTotalCoredDev }
}

pop_menu_cored_minorities_calculations = {
	export_to_variable = { which = nbMinorityCoredDev value = development }
	ROOT = { set_variable = { which = nbMinorityCoredDev value = 0 } }
	if = { limit = { has_small_centaur_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } }
	}
	else_if = { limit = { has_large_centaur_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } }
	}
	if = { limit = { has_small_elven_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } }
	}
	else_if = { limit = { has_large_elven_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } }
	}
	if = { limit = { has_small_dwarven_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } }
	}
	else_if = { limit = { has_large_dwarven_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } }
	}
	if = { limit = { has_small_gnollish_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } }
	}
	else_if = { limit = { has_large_gnollish_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } }
	}
	if = { limit = { has_small_gnomish_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } }
	}
	else_if = { limit = { has_large_gnomish_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } }
	}
	if = { limit = { has_small_goblin_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } }
	}
	else_if = { limit = { has_large_goblin_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } }
	}
	if = { limit = { has_small_half_elven_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } }
	}
	else_if = { limit = { has_large_half_elven_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } }
	}
	if = { limit = { has_small_half_orcish_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } }
	}
	else_if = { limit = { has_large_half_orcish_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } }
	}
	if = { limit = { has_small_halfling_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } }
	}
	else_if = { limit = { has_large_halfling_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } }
	}
	if = { limit = { has_small_harimari_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } }
	}
	else_if = { limit = { has_large_harimari_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } }
	}
	if = { limit = { has_small_harpy_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } }
	}
	else_if = { limit = { has_large_harpy_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } }
	}
	if = { limit = { has_small_hobgoblin_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } }
	}
	else_if = { limit = { has_large_hobgoblin_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } }
	}
	if = { limit = { has_small_human_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } }
	}
	else_if = { limit = { has_large_human_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } }
	}
	if = { limit = { has_small_kobold_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } }
	}
	else_if = { limit = { has_large_kobold_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } }
	}
	if = { limit = { has_small_lizardfolk_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } }
	}
	else_if = { limit = { has_large_lizardfolk_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } }
	}
	# if = { limit = { has_small_mechanism_minority_trigger = yes }
		# ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } }
	# }
	# else_if = { limit = { has_large_mechanism_minority_trigger = yes }
		# ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } }
	# }
	if = { limit = { has_small_ogre_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } }
	}
	else_if = { limit = { has_large_ogre_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } }
	}
	if = { limit = { has_small_orcish_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } }
	}
	else_if = { limit = { has_large_orcish_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } }
	}
	if = { limit = { has_small_ruinborn_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } }
	}
	else_if = { limit = { has_large_ruinborn_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } }
	}
	if = { limit = { has_small_troll_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.05 } }
	}
	else_if = { limit = { has_large_troll_minority_trigger = yes }
		ROOT = { change_variable = { which = nbMinorityCoredDev value = 0.10 } }
	}
	ROOT = { multiply_variable = { which = nbMinorityCoredDev which = PREV } }
}

#----# Change military Menu #-----#
pop_menu_military_setup = {
	pop_menu_calculations = { cored = yes }
	set_variable = { which = centaurRanking value = 1 }
	set_variable = { which = dwarvenRanking value = 2 }
	set_variable = { which = elvenRanking value = 3 }
	set_variable = { which = gnollishRanking value = 4 }
	set_variable = { which = gnomishRanking value = 5 }
	set_variable = { which = goblinRanking value = 6 }
	set_variable = { which = halflingRanking value = 7 }
	set_variable = { which = half_elvenRanking value = 8 }
	set_variable = { which = half_orcishRanking value = 9 }
	set_variable = { which = harimariRanking value = 10 }
	set_variable = { which = harpyRanking value = 11 }
	set_variable = { which = hobgoblinRanking value = 12 }
	set_variable = { which = humanRanking value = 13 }
	set_variable = { which = koboldRanking value = 14 }
	set_variable = { which = lizardfolkRanking value = 15 }
	set_variable = { which = ogreRanking value = 16 }
	set_variable = { which = orcishRanking value = 17 }
	set_variable = { which = ruinbornRanking value = 18 }
	set_variable = { which = trollRanking value = 19 }
	pop_menu_military_sorting_effect = yes
}

pop_menu_military_sorting_setup = {
	set_variable = { which = nb$RACE$Dev which = PREV }
	set_variable = { which = nbRaceDev which = nb$RACE$Dev }
	if = { limit = { ROOT = { has_country_modifier = $RACE$_military } }
		ROOT = { set_variable = { which = $RACE$Ranking value = 1 } }
	}
	else_if = { limit = { ROOT = { check_variable = { which = nb$RACE$Dev value = 30 } } }
		set_province_flag = available_not_sorted
		save_event_target_as = most_represented_race
	}
	else = {
		set_province_flag = unavailable_not_sorted
		save_event_target_as = most_represented_race
	}
}

pop_menu_military_sorting_effect = {
	19 = { pop_menu_military_sorting_setup = { RACE = centaur } }
	18 = { pop_menu_military_sorting_setup = { RACE = dwarven } }
	17 = { pop_menu_military_sorting_setup = { RACE = elven } }
	16 = { pop_menu_military_sorting_setup = { RACE = gnollish } }
	15 = { pop_menu_military_sorting_setup = { RACE = gnomish } }
	14 = { pop_menu_military_sorting_setup = { RACE = goblin } }
	13 = {
		set_variable = { which = nbRaceDev value = 0 }
		set_variable = { which = raceRanking value = 19 }
		ROOT = { set_variable = { which = half_elvenRanking value = 19 } }
		# pop_menu_military_sorting_setup = { RACE = half_elven }
	}	#half elven military doesn't exist
	12 = { pop_menu_military_sorting_setup = { RACE = half_orcish } }
	11 = { pop_menu_military_sorting_setup = { RACE = halfling } }
	10 = { pop_menu_military_sorting_setup = { RACE = harimari } }
	9 = { pop_menu_military_sorting_setup = { RACE = harpy } }
	8 = { pop_menu_military_sorting_setup = { RACE = hobgoblin } }
	7 = { pop_menu_military_sorting_setup = { RACE = human } }
	6 = { pop_menu_military_sorting_setup = { RACE = kobold } }
	5 = { pop_menu_military_sorting_setup = { RACE = lizardfolk } }
	4 = { pop_menu_military_sorting_setup = { RACE = ogre } }
	3 = { pop_menu_military_sorting_setup = { RACE = orcish } }
	2 = { pop_menu_military_sorting_setup = { RACE = ruinborn } }
	1 = { pop_menu_military_sorting_setup = { RACE = troll } }

	set_variable = { which = raceRanking value = 1 }

	while = { limit = { pop_menu_variables = { has_province_flag = available_not_sorted } }
		change_variable = { which = raceRanking value = 1 }
		pop_menu_variables = {	#province group that has all the provinces with stored variables
			limit = {
				has_province_flag = available_not_sorted
				check_variable = { which = nbRaceDev which = event_target:most_represented_race }
			}
			save_event_target_as = most_represented_race
		}
		event_target:most_represented_race = {
			clr_province_flag = available_not_sorted
			pop_ranking_conversion = yes
			set_variable = { which = nbRaceDev value = 0 }
		}
	}
	while = { limit = { pop_menu_variables = { has_province_flag = unavailable_not_sorted } }
		change_variable = { which = raceRanking value = 1 }
		pop_menu_variables = {	#province group that has all the provinces with stored variables
			limit = {
				has_province_flag = unavailable_not_sorted
				check_variable = { which = nbRaceDev which = event_target:most_represented_race }
			}
			save_event_target_as = most_represented_race
		}
		event_target:most_represented_race = {
			clr_province_flag = unavailable_not_sorted
			pop_ranking_conversion = yes
			set_variable = { which = nbRaceDev value = 0 }
		}
	}
}

pop_menu_military_change_mil_effects = {
	pop_menu_military_change_mil_race = { RACE = centaur ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = dwarven ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = gnollish ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = gnomish ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = goblin ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = halfling ORDER = $ORDER$ }
	# pop_menu_military_change_mil_race = { RACE = half_elven ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = half_orcish ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = harimari ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = harpy ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = human ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = kobold ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = lizardfolk ORDER = $ORDER$ }
	# pop_menu_military_change_mil_race = { RACE = mechanism ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = ogre ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = orcish ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = ruinborn ORDER = $ORDER$ }
	pop_menu_military_change_mil_race = { RACE = troll ORDER = $ORDER$ }
	
	if = { limit = { has_dlc = "Cradle of Civilization" }
		pop_menu_military_change_mil_race = { RACE = hobgoblin ORDER = $ORDER$ }
		pop_menu_military_change_mil_race = { RACE = elven ORDER = $ORDER$ }
	}
	else = {
		pop_menu_military_change_mil_race = { RACE = hobgoblin ORDER = $ORDER$ NO_DLC_HOBGOBLIN = yes }
		pop_menu_military_change_mil_race = { RACE = elven ORDER = $ORDER$ NO_DLC_ELVEN = yes }
	}
}

pop_menu_military_change_mil_race = {
    if = { limit = { is_variable_equal = { which = $RACE$Ranking value = $ORDER$ } }
        if = { limit = { is_variable_equal = { which = $RACE$Ranking value = 1 } }
            custom_tooltip = pop_military_current_tt
            tooltip = { add_country_modifier = { name = $RACE$_military duration = -1 desc = pop_military_modifier_duration_hidden } }
			if = { limit = { NOT = { has_dlc = "Cradle of Civilization" } }
				if = { limit = { has_country_modifier = hobgoblin_military }
					tooltip = { add_country_modifier = { name = hobgoblin_military_no_dlc duration = -1 desc = pop_military_modifier_duration_hidden } }
				}
				else_if = { limit = { has_country_modifier = elven_military }
					tooltip = { add_country_modifier = { name = elven_military_no_dlc duration = -1 desc = pop_military_modifier_duration_hidden } }
				}
			}
        }
        else_if = {
            limit = {
                mil_power = 200
                high_tolerance_$RACE$_race_trigger = yes
                OR = {
                    check_variable = { which = nb$RACE$Dev value = 30 }
                    AND = {
                        has_country_modifier = $RACE$_administration
                        NOT = { primary_culture = sunrise_elf }
                    }
                }
            }
            add_mil_power = -200
            clear_racial_military = yes

            add_country_modifier = { name = restructuring_military duration = 3650 }
            add_country_modifier = { name = $RACE$_military duration = -1 }
			[[NO_DLC_HOBGOBLIN]
				add_country_modifier = { name = hobgoblin_military_no_dlc duration = -1 }
			]
			[[NO_DLC_ELVEN]
				add_country_modifier = { name = elven_military_no_dlc duration = -1 }
			]
            pop_menu_military_change_tech = { RACE = $RACE$ ORDER = $ORDER$ }
            
            # update sprites to match new military
            update_unit_sprites_for_racial_mil = yes
        }
        else = {
            custom_tooltip = pop_military_change_not_possible_tt
            if = { limit = { NOT = { mil_power = 200 } }
                custom_tooltip = pop_military_not_enough_milpower_tt
            }
            if = { limit = { NOT = { high_tolerance_$RACE$_race_trigger = yes } }
                custom_tooltip = pop_military_tolerance_too_low_tt
            }
            if = { limit = { NOT = { check_variable = { which = nb$RACE$Dev value = 30 } } }
                custom_tooltip = pop_military_dev_too_low_tt
            }
            if = {
                limit = {
					has_country_modifier = $RACE$_administration
					primary_culture = sunrise_elf
                }
                custom_tooltip = pop_military_primary_is_sunrise_elf_tt
            }
            custom_tooltip = pop_military_separator_tt
            tooltip = { add_country_modifier = { name = $RACE$_military duration = -1 desc = pop_military_modifier_duration_hidden } }
			[[NO_DLC_HOBGOBLIN]
				tooltip = { add_country_modifier = { name = hobgoblin_military_no_dlc duration = -1 desc = pop_military_modifier_duration_hidden} }
			]
			[[NO_DLC_ELVEN]
				tooltip = { add_country_modifier = { name = elven_military_no_dlc duration = -1 desc = pop_military_modifier_duration_hidden } }
			]
        }
    }
}

pop_menu_military_change_tech = {
	if = {
		limit = { is_variable_equal = { which = elvenRanking value = $ORDER$ } }
		if = {
			limit = {
				OR = {
					capital_scope = { superregion = deepwoods_superregion }
					primary_culture = wood_elf
					AND = {
						accepted_culture = wood_elf
						NOT = { culture_group = elven }
					}
				}
			}
			change_unit_type = tech_wood_elf
		}
		else_if = {
			limit = {
				OR = {
					primary_culture = sun_elf
					primary_culture = dawn_elf
					primary_culture = desert_elf
					primary_culture = sunrise_elf
					capital_scope = { continent = asia }
					capital_scope = { continent = africa }
					AND = {
						religion_group = bulwari
						OR = {
							capital_scope = { continent = north_america }
							capital_scope = { continent = south_america }
						}
					}
					AND = {
						accepted_culture = sun_elf
						NOT = { culture_group = elven }
					}
					AND = {
						accepted_culture = dawn_elf
						NOT = { culture_group = elven }
					}
					AND = {
						accepted_culture = desert_elf
						NOT = { culture_group = elven }
					}
					AND = {
						accepted_culture = sunrise_elf
						NOT = { culture_group = elven }
					}
				}
			}
			change_unit_type = tech_east_elven
		}
		else = {
			change_unit_type = tech_elven
		}
	}
	else_if = {
		limit = { is_variable_equal = { which = half_orcishRanking value = $ORDER$ } }
		if = {
			limit = {
				OR = {
					capital_scope = { superregion = gerudia_superregion }
					primary_culture = grombar_half_orc
					primary_culture = grombar_orc
					primary_culture = gray_orc
					AND = {
						accepted_culture = grombar_half_orc
						NOT = { culture_is_half_orcish = yes }
					}
					AND = {
						accepted_culture = grombar_orc
						NOT = { culture_is_half_orcish = yes }
					}
					AND = {
						accepted_culture = gray_orc
						NOT = { culture_is_half_orcish = yes }
					}
				}
			}
			change_unit_type = tech_gerudian
		}
		else = {
			change_unit_type = tech_cannorian
		}
	}
	else_if = {
		limit = { is_variable_equal = { which = harimariRanking value = $ORDER$ } }
		if = {
			limit = {
				OR = {
					capital_scope = { superregion = yanshen_superregion }
					capital_scope = { superregion = south_haless_superregion }
					capital_scope = { superregion = north_haless_superregion }
					primary_culture = serene_harimari
					primary_culture = roaming_harimari
					AND = {
						accepted_culture = serene_harimari
						NOT = { culture_group = harimari }
					}
					AND = {
						accepted_culture = roaming_harimari
						NOT = { culture_group = harimari }
					}
				}
			}
			change_unit_type = tech_east_harimari
		}
		else = {
			change_unit_type = tech_west_harimari
		}
	}
	else_if = {
		limit = { is_variable_equal = { which = harpyRanking value = $ORDER$ } }
		if = {
			limit = {
				OR = {
					capital_scope = { superregion = yanshen_superregion }
					capital_scope = { superregion = south_haless_superregion }
					capital_scope = { superregion = north_haless_superregion }
					primary_culture = feng_harpy
					AND = {
						accepted_culture = feng_harpy
						NOT = { culture_group = harpy }
					}
				}
			}
			change_unit_type = tech_feng_harpy
		}
		else_if = {
			limit = {
				OR = {
					capital_scope = { superregion = north_salahad_superregion }
					capital_scope = { superregion = west_sarhal_superregion }
					capital_scope = { superregion = fangaula_superregion }
					primary_culture = feng_harpy
					AND = {
						accepted_culture = nzeri_harpy
						NOT = { culture_group = harpy }
					}
				}
			}
			change_unit_type = tech_nzeri_harpy
		}
		else = {
			change_unit_type = tech_firanyan_harpy
		}
	}
	else_if = {
		limit = { is_variable_equal = { which = humanRanking value = $ORDER$ } }
		if = { limit = { capital_scope = { superregion = bulwar_superregion } }
			change_unit_type = tech_bulwari
		}
		else_if = { limit = { capital_scope = { superregion = north_salahad_superregion } }
			change_unit_type = tech_salahadesi
		}
		else_if = { limit = { capital_scope = { superregion = south_salahad_superregion } }
			change_unit_type = tech_salahadesi
		}
		else_if = { 
			limit = { capital_scope = { superregion = west_sarhal_superregion } }
		    if = {
				limit = { 
					OR = {
						accepted_culture = tanizu
						accepted_culture = dakinshi
						accepted_culture = antmvura
					}
					NOT = { culture_group = tanizu }
				}
				else = { change_unit_type = tech_tanizu }
			}
			change_unit_type = tech_west_sarhaly
		}
		else_if = { 
			limit = { capital_scope = { superregion = south_sarhal_superregion } }
			if = {
				limit = { 
					OR = {
						accepted_culture = suhratbi
						accepted_culture = dhebiji
						accepted_culture = guryadagga
						accepted_culture = ashamadi
					}
					NOT = { culture_group = baashidi }
				}
				change_unit_type = tech_baashidi
			}
			else = { change_unit_type = tech_south_sarhaly }
		}
		else_if = { limit = { capital_scope = { superregion = east_sarhal_superregion } }	#wingren again
			change_unit_type = tech_east_sarhaly
		}
		else_if = { limit = { capital_scope = { superregion = rahen_superregion } }
			change_unit_type = tech_raheni
		}
		else_if = {
			limit = {
				OR = {
					capital_scope = { superregion = yanshen_superregion }
					capital_scope = { superregion = south_haless_superregion }
				}
			}
			change_unit_type = tech_halessi
		}
		else_if = { limit = { capital_scope = { superregion = north_haless_superregion } }
			change_unit_type = tech_shuvuush
		}
		else_if = { limit = { capital_scope = { superregion = forbidden_lands_superregion } }
			change_unit_type = tech_triunic
		}
		else_if = { limit = { capital_scope = { superregion = gerudia_superregion } }
			change_unit_type = tech_gerudian
		}
		else_if = {
			limit = {
				OR = {
					capital_scope = { superregion = broken_lands_superregion }
					capital_scope = { superregion = eordand_superregion }
					capital_scope = { superregion = ynn_superregion }
				}
			}
			change_unit_type = tech_ynnsmen
		}
		else = {
			change_unit_type = tech_cannorian
		}
	}
	else_if = {
		limit = { is_variable_equal = { which = koboldRanking value = $ORDER$ } }
		if = {
			limit = {
				OR = {
					capital_scope = { superregion = yanshen_superregion }
					capital_scope = { superregion = south_haless_superregion }
					capital_scope = { superregion = north_haless_superregion }
					capital_scope = { superregion = rahen_superregion }
					primary_culture = goldscale_kobold
					AND = {
						accepted_culture = goldscale_kobold
						NOT = { culture_group = kobold }
					}
				}
			}
			change_unit_type = tech_east_kobold
		}
		else = {
			change_unit_type = tech_kobold
		}
	}
	else_if = {
		limit = { is_variable_equal = { which = ogreRanking value = $ORDER$ } }
		if = {
			limit = {
				OR = {
					capital_scope = { superregion = yanshen_superregion }
					capital_scope = { superregion = south_haless_superregion }
					capital_scope = { superregion = north_haless_superregion }
					capital_scope = { superregion = rahen_superregion }
					primary_culture = horned_ogre
					AND = {
						accepted_culture = horned_ogre
						NOT = { culture_group = ogre }
					}
				}
			}
			change_unit_type = tech_eastern_ogre
		}
		else = {
			change_unit_type = tech_ogre	#may need custom one
		}
	}
	else_if = {
		limit = { is_variable_equal = { which = orcishRanking value = $ORDER$ } }
		if = {
			limit = {
				OR = {
					capital_scope = {
						continent = serpentspine
					}
					primary_culture = black_orc
					AND = {
						accepted_culture = black_orc
						NOT = { culture_group = orcish }
					}
				}
			}
			change_unit_type = tech_black_orcish
		}
		else_if = {
			limit = {
				OR = {
					capital_scope = {
						continent = asia
						NOT = { superregion = forbidden_lands_superregion }
					}
					primary_culture = brown_orc
					AND = {
						accepted_culture = brown_orc
						NOT = { culture_group = orcish }
					}
				}
			}
			change_unit_type = tech_east_orcish
		}
		else = {
			change_unit_type = tech_orcish
		}
	}
	else_if = {
		limit = { is_variable_equal = { which = ruinbornRanking value = $ORDER$ } }
		if = { 
			limit = {
				OR = {
					capital_scope = { superregion = ynn_superregion }
					capital_scope = { region = forest_of_the_cursed_ones_region }
				}
			}
			change_unit_type = tech_ynnic
		}
		else_if = { limit = { capital_scope = { superregion = eordand_superregion } }
			change_unit_type = tech_eordand
		}
		else_if = {
			limit = {
				OR = {
					culture_group = devandi_ruinborn_elf
					culture_group = eltibhari_ruinborn_elf
					capital_scope = { region = chendhya_region }
				}
			}
			change_unit_type = tech_bharbhen
		}
		else_if = { limit = { capital_scope = { superregion = kheionai_superregion } }
			change_unit_type = tech_kheionai
		}
		else_if = { limit = { capital_scope = { superregion = taychend_superregion } }
			change_unit_type = tech_taychendi
		}
		else_if = {
			limit = {
				OR = {
					capital_scope = { region = haraf_region }
					capital_scope = { region = tor_nayyi_region }
				}
			}
			change_unit_type = tech_harafic
		}
		else_if = {
			limit = {
				OR = {
					capital_scope = { superregion = broken_lands_superregion  }
					capital_scope = { superregion = ruin_proper_superregion }
				}
			}
			change_unit_type = tech_noruin
		}
		else_if = {
			limit = {
				OR = {
					capital_scope = { superregion = effelai_superregion }
					capital_scope = { region = amadia_region }
				}
			}
			if = {
				limit = {
					OR = {
						culture_group = eltibhari_ruinborn_elf
						culture_group = devandi_ruinborn_elf
					}
				}
				change_unit_type = tech_bharbhen
			}
			else = {
				change_unit_type = tech_south_aelantiri
			}
		}
		else = {
			change_unit_type = tech_noruin
		}
	}
	else_if = {
        limit = { is_variable_equal = { which = trollRanking value = $ORDER$ } }
        if = {
            limit = {
                OR = {
                    capital_scope = { superregion = east_sarhal_superregion }
                    primary_culture = swamp_troll
                    AND = {
                        accepted_culture = swamp_troll
                        NOT = { culture_group = giantkind }
                    }
                }
            }
            change_unit_type = tech_swamp_troll
        }
        else = {
            change_unit_type = tech_troll    #may need custom one
        }
    }
	else_if = {
        limit = { is_variable_equal = { which = halflingRanking value = $ORDER$ } }
        if = {
            limit = {
                OR = {
                    capital_scope = {
						superregion = west_sarhal_superregion
					}
					culture_group = vyzemby
                    AND = {
						OR = {
							accepted_culture = amezatany
							accepted_culture = mboala
							accepted_culture = mazava
							accepted_culture = fomarati
							accepted_culture = vyoronsi
						}
                        NOT = { culture_group = vyzemby }
                    }
                }
            }
            change_unit_type = tech_vyzemby
        }
        else = {
            change_unit_type = tech_halfling    #may need custom one
        }
    }
	else_if = {
        limit = { is_variable_equal = { which = goblinRanking value = $ORDER$ } }
        if = {
			limit = {
				OR = { #Forest Goblin
					capital_scope = { superregion = deepwoods_superregion }
					primary_culture = forest_goblin
					AND = {
						accepted_culture = forest_goblin
						NOT = { culture_group = goblin }
					}
				}
			}
			change_unit_type = tech_forest_goblin
		}
		else_if = {
			limit = {
				OR = { #Exodus Goblin
					capital_scope = { superregion = bulwar_superregion }
					primary_culture = exodus_goblin
					AND = {
						accepted_culture = exodus_goblin
						NOT = { culture_group = goblin }
					}
				}
			}
			change_unit_type = tech_exodus_goblin
		}
		else_if = {
			limit = {
				OR = { #Cave Goblin
					capital_scope = { continent = serpentspine }
					dwarovar_goblin_culture_primary = yes
					AND = {
						dwarovar_goblin_culture_accepted = yes
						NOT = { culture_group = goblin }
					}
				}
			}
			change_unit_type = tech_cave_goblin
		}
		else = { #Common Goblin (Fallback if all other conditions fail)
			change_unit_type = tech_goblin
		}
	}
	else = {
		change_unit_type = tech_$RACE$
	}
	
}

update_unit_sprites_for_racial_mil = {

	if = {
		limit = { has_country_modifier = human_military }
		
		# rahen
		if = {
			limit = { capital_scope = { superregion = rahen_superregion } }
			apply_sprite_pack = indiangfx_sprite_pack
		}
		
		# south haless + yanshen
		else_if = {
			limit = {
				capital_scope = {
					OR = {
						superregion = south_haless_superregion
						superregion = yanshen_superregion
					}
				}
			}
			apply_sprite_pack = asiangfx_sprite_pack
		}

		# north haless + forbidden plains		
		else_if = {
			limit = {
				capital_scope = {
					OR = {
						superregion = north_haless_superregion
						superregion = forbidden_plains_superregion
					}
				}
			}
			apply_sprite_pack = triunicgfx_sprite_pack	
		}

		# east sarhal + south sarhal
		else_if = {
			limit = {
				capital_scope = {
					OR = {
						superregion = east_sarhal_superregion
						superregion = south_sarhal_superregion
					}
				}
			}
			apply_sprite_pack = africangfx_sprite_pack
		}
		
		# west sarhal + north salahad + south_salahad + bulwar
		else_if = {
			limit = {
				capital_scope = {
					OR = {
						superregion = fangaula_superregion
						superregion = north_salahad_superregion
						superregion = south_salahad_superregion
						superregion = bulwar_superregion
					}
				}
			}
			apply_sprite_pack = muslimgfx_sprite_pack
		}
		
		# aelantir colonisers
		else_if = {
			limit = {
				capital_scope = {
					OR = {
						continent = north_america
						continent = south_america
					}
				}
			}
			apply_sprite_pack = divenhalgfx_sprite_pack
		}
		
		# cannor and gerudia (default fallback)
		else = {
			apply_sprite_pack = westerngfx_sprite_pack
		}
	}

	else_if = {
		limit = { has_country_modifier = elven_military }
		
		# wood elf
		if = {
			limit = { capital_scope = { superregion = deepwoods_superregion } }
			apply_sprite_pack = wood_elf_sprite_pack
		}

		# desert elf
		else_if = {
			limit = {
				capital_scope = {
					OR = {
						region = far_salahad_region
						region = far_bulwar_region
					}
				}
			}
			apply_sprite_pack = jaddari_sprite_pack
		}
		
		# sun elf (and colonizers)
		else_if = {
			limit = {
				capital_scope = {
					OR = {
						superregion = bulwar_superregion
						continent = south_america
					}
				}
			}
			apply_sprite_pack = sun_elf_sprite_pack
		}
		
		# moon elf (default fallback)
		else = {
			apply_sprite_pack = group_moon_elf_sprite_pack
		}
	}

	else_if = {
		limit = { has_country_modifier = dwarven_military }
		apply_sprite_pack = group_dwarves_sprite_pack
	}
	
	else_if = {
		limit = { has_country_modifier = halfling_military }
		# TODO update if halflings get unique models
		
		# vzyemby
		if = {
			limit = { capital_scope = { region = fahvanosy_region } }
			apply_sprite_pack = africangfx_sprite_pack
		}
		
		# redfoot (default fallback)
		else = {
			apply_sprite_pack = redfoot_sprite_pack
		}
	}

	else_if = {
		limit = { has_country_modifier = gnomish_military }
		# TODO update if gnomes get unique models
		apply_sprite_pack = westerngfx_sprite_pack
	}

	else_if = {
		limit = { has_country_modifier = kobold_military }

		# greenscale		
		if = {
			limit = { capital_scope = { region = alenic_frontier_region } }
			apply_sprite_pack = greenscale_sprite_pack
		}
		
		# goldscale
		else_if = {
			limit = { capital_scope = { continent = asia } }
			apply_sprite_pack = goldscale_sprite_pack
		}

		# redscale (default fallback)
		else = {
			apply_sprite_pack = redscale_sprite_pack
		}
	}

	else_if = { 
		limit = { has_country_modifier = orcish_military }
		# these are reskinned DLC skins, so if you swap to orcish without having the DLC, nothing happens	
	
		# gray orc
		if = {
			limit = { capital_scope = { superregion = gerudia_superregion } }
			apply_sprite_pack = gray_orc_sprite_pack
		}
		
		# black orc
		else_if = {
			limit = { capital_scope = { continent = serpentspine } }
			apply_sprite_pack = black_orc_sprite_pack
		}
		
		# brown orc
		else_if = {
			limit = { capital_scope = { continent = asia } }
			apply_sprite_pack = brown_orc_sprite_pack
		}
		
		# green orc (default fallback)	
		else = {
			apply_sprite_pack = green_orc_sprite_pack
		}
	}

	else_if = { 
		limit = { has_country_modifier = half_orcish_military }
		# TODO update if half orcs get unique models

		# rahen (command slave states)		
		if = {
			limit = { capital_scope = { continent = asia } }
			apply_sprite_pack = indiangfx_sprite_pack
		}

		# cannor (default fallback)
		else = {
			apply_sprite_pack = westerngfx_sprite_pack
		}
	}

	else_if = {
		limit = { has_country_modifier = gnollish_military }
		apply_sprite_pack = gnoll_sprite_pack
	}

	else_if = {
		limit = { has_country_modifier = ruinborn_military }
		
		# kheionai
		if = {
			limit = { capital_scope = { superregion = kheionai_superregion } }
			apply_sprite_pack = kheionai_cool_units_sprite_pack
		}
		
		# eordand and taychend
		else_if = {
			limit = {
				capital_scope = {
					OR = {
						superregion = eordand_superregion
						superregion = taychend_superregion
					}
				}
			}
			apply_sprite_pack = southamericagfx_sprite_pack
		}
		
		# effelai, ruin proper and torn gates
		else_if = {
			limit = {
				capital_scope = {
					OR = {
						superregion = effelai_superregion
						superregion = ruin_proper_superregion
						superregion = torn_gates_superregion
					}
				}
			}
			apply_sprite_pack = northamericagfx_sprite_pack
		}
		
		# ynnic (default fallback)
		else = {
			apply_sprite_pack = easterngfx_sprite_pack
		}
	}

	else_if = {
		limit = { has_country_modifier = goblin_military }
		
		# exodus goblin
		if = {
			limit = { capital_scope = { superregion = bulwar_superregion } }
			apply_sprite_pack = exodus_goblin_sprite_pack
		}
		
		# forest goblin
		else_if = {
			limit = { capital_scope = { superregion = deepwoods_superregion } }
			apply_sprite_pack = forest_goblin_sprite_pack
		}
		
		# cave goblin
		else_if = {
			limit = { capital_scope = { continent = serpentspine } }
			apply_sprite_pack = cave_goblin_sprite_pack
		}
		
		# common goblin (default fallback)
		else = {
			apply_sprite_pack = common_goblin_sprite_pack
		}
	}

	else_if = {
		limit = { has_country_modifier = harpy_military }
		apply_sprite_pack = harpy_sprite_pack
	}

	else_if = {
		limit = { has_country_modifier = troll_military }
		# TODO update if trolls get unique models
		
		# swamp trolls
		if = {
			limit = { capital_scope = { region = yezel_mora_region } }
			apply_sprite_pack = africangfx_sprite_pack	
		}
		
		# gerudian trolls (default fallback)
		else = {
			apply_sprite_pack = westerngfx_sprite_pack
		}
	}

	else_if = {
		limit = { has_country_modifier = half_elven_military }
		# TODO update if half elves get unique models
		
		# bulwar + far salahad
		if = {
			limit = {
				capital_scope = {
					OR = {
						superregion = bulwar_superregion
						superregion = far_salahad_superregion
					}
				}
			}
			apply_sprite_pack = muslimgfx_sprite_pack
		}
		
		# cannor (default fallback)
		else = {
			apply_sprite_pack = westerngfx_sprite_pack
		}
	}

    else_if = {
    	limit = { has_country_modifier = harimari_military }
    	apply_sprite_pack = harimari_sprite_pack
	}
    
	else_if = {
		limit = { has_country_modifier = hobgoblin_military }
		apply_sprite_pack = hobgoblin_sprite_pack
	}
    
	else_if = {
		limit = { has_country_modifier = centaur_military }
		apply_sprite_pack = centaur_sprite_pack
	}
    
	else_if = {
		limit = { has_country_modifier = ogre_military }
		# TODO update if ogres get unique models
		
		# oni
		if = {
			limit = { capital_scope = { region = demon_hills_region } }
			apply_sprite_pack = asiangfx_sprite_pack
		}
		
		# forbidden plains/miremaw ogres (default fallback)
		else = {
			apply_sprite_pack = westerngfx_sprite_pack
		}
	}
    
	else_if = {
		limit = { has_country_modifier = lizardfolk_military }
		# TODO update if lizardfolk get unique models
		apply_sprite_pack = muslimgfx_sprite_pack
	}
}


generic_purge_expel_opinion_setup = {

	if = {
		limit = {
			ROOT = { has_country_modifier = racial_pop_$race$_expulsion }
			has_country_modifier = $race$_administration
		}
		add_opinion = { who = ROOT modifier = opinion_expelling_race }
		remove_opinion = { who = ROOT modifier = opinion_persecuted_race }
	}
	if = {
		limit = {
			has_opinion_modifier = { who = ROOT modifier = opinion_expelling_race }
			has_country_modifier = $race$_administration
			ROOT = { NOT = { has_country_modifier = racial_pop_$race$_expulsion } }
		}
		remove_opinion = { who = ROOT modifier = opinion_expelling_race }
		add_opinion = { who = ROOT modifier = opinion_persecuted_race }
	}
	# NOTE: this was originally an if-else, but the add_opinion for opinion_persecuted_race failed when done like this (bruh)

	if = {
		limit = {
			ROOT = { has_country_modifier = racial_pop_$race$_purge }
			has_country_modifier = $race$_administration
		}
		add_opinion = { who = ROOT modifier = opinion_purging_race }
		remove_opinion = { who = ROOT modifier = opinion_persecuted_race }
	}
	if = {
		limit = {
			has_opinion_modifier = { who = ROOT modifier = opinion_purging_race }
			has_country_modifier = $race$_administration
			ROOT = { NOT = { has_country_modifier = racial_pop_$race$_purge } }
		}
		remove_opinion = { who = ROOT modifier = opinion_purging_race }
		add_opinion = { who = ROOT modifier = opinion_persecuted_race }
	}
	# NOTE: this was originally an if-else, but the add_opinion for opinion_persecuted_race failed when done like this (bruh)

}

# for newly spawned nations - no point doing the persecuted check here because
# with how it currently works a newly spawned nation would never have one of the two modifiers, so would never get persecuted
generic_purge_expel_opinion_setup_reverse = {

	if = {
		limit = {
			ROOT = { has_country_modifier = $race$_administration }
		}

		if = {
			limit = { has_country_modifier = racial_pop_$race$_expulsion }
			reverse_add_opinion = { who = ROOT modifier = opinion_expelling_race }
		}

		if = {
			limit = { has_country_modifier = racial_pop_$race$_purge }
			reverse_add_opinion = { who = ROOT modifier = opinion_purging_race }
		}
	}
}

racial_purge_disabled_tt =  {
    custom_tooltip = pop_menu_unavailable_tt
    if = { limit = { has_country_modifier = forced_to_end_$RACE$_purge }
		custom_tooltip = pop_menu_cannot_purge_forced_tt
    }
    if = { limit = { has_country_modifier = racial_pop_$RACE$_expulsion }
		custom_tooltip = pop_menu_cannot_purge_while_expelling_tt
    }
    if = { limit = { has_country_modifier = $RACE$_administration }
		custom_tooltip = pop_menu_cannot_purge_own_race_tt
    }
    if = { limit = { has_country_modifier = $RACE$_military }
		custom_tooltip = pop_menu_cannot_purge_military_race_tt
    }
    if = { limit = { ruler_is_$RACE$ = yes }
		custom_tooltip = pop_menu_cannot_purge_ruler_race_tt
    }
	if = {
		limit = {
			has_country_flag = has_caste_estates
			is_race_in_any_caste = {
				$RACE$ = yes
			}
		}
		custom_tooltip = pop_menu_cannot_purge_castes_tt
	}
    if = { limit = { NOT = { adm_power = 100 } }
		custom_tooltip = pop_menu_cannot_purge_not_enough_adm_tt
    }
	if = { limit = { OR = { has_government_attribute = disabled_purging has_government_attribute = disabled_purging_$RACE$ } }
		custom_tooltip = pop_menu_cannot_purge_government_attribute_tt
	}
    hidden_effect = {
		country_event = { id = racial_pop_events_$RACE$.24 }
    }
}

racial_expel_disabled_tt = {
	custom_tooltip = pop_menu_unavailable_tt
	if = { limit = { has_country_modifier = racial_pop_$RACE$_purge }
		custom_tooltip = pop_menu_cannot_expel_while_purging_tt
	}
	if = { limit = { has_country_modifier = $RACE$_administration }
		custom_tooltip = pop_menu_cannot_expel_own_race_tt
	}
	if = { limit = { has_country_modifier = $RACE$_military }
		custom_tooltip = pop_menu_cannot_expel_military_race_tt
	}
	if = { limit = { ruler_is_$RACE$ = yes }
		custom_tooltip = pop_menu_cannot_expel_ruler_race_tt
	}
	if = {
		limit = {
			has_country_flag = has_caste_estates
			is_race_in_any_caste = {
				$RACE$ = yes
			}
		}
		custom_tooltip = pop_menu_cannot_purge_castes_tt
	}
	if = { limit = { NOT = { adm_power = 50 } }
		custom_tooltip = pop_menu_cannot_expel_not_enough_adm_tt
	}
	if = { limit = { OR = { has_government_attribute = disabled_expelling has_government_attribute = disabled_expelling_$RACE$ } }
		custom_tooltip = pop_menu_cannot_expel_government_attribute_tt
	}
	hidden_effect = {
		country_event = { id = racial_pop_events_$RACE$.24 }
    }
}

remove_racial_majority = {
	remove_province_modifier = centaur_majority_primary
	remove_province_modifier = centaur_majority_integrated
	remove_province_modifier = centaur_majority_coexisting
	remove_province_modifier = centaur_majority_oppressed
	remove_province_modifier = dwarven_majority_primary
	remove_province_modifier = dwarven_majority_integrated
	remove_province_modifier = dwarven_majority_coexisting
	remove_province_modifier = dwarven_majority_oppressed
	remove_province_modifier = elven_majority_primary
	remove_province_modifier = elven_majority_integrated
	remove_province_modifier = elven_majority_coexisting
	remove_province_modifier = elven_majority_oppressed
	remove_province_modifier = gnollish_majority_primary
	remove_province_modifier = gnollish_majority_integrated
	remove_province_modifier = gnollish_majority_coexisting
	remove_province_modifier = gnollish_majority_oppressed
	remove_province_modifier = gnomish_majority_primary
	remove_province_modifier = gnomish_majority_integrated
	remove_province_modifier = gnomish_majority_coexisting
	remove_province_modifier = gnomish_majority_oppressed
	remove_province_modifier = goblin_majority_primary
	remove_province_modifier = goblin_majority_integrated
	remove_province_modifier = goblin_majority_coexisting
	remove_province_modifier = goblin_majority_oppressed
	remove_province_modifier = halfling_majority_primary
	remove_province_modifier = halfling_majority_integrated
	remove_province_modifier = halfling_majority_coexisting
	remove_province_modifier = halfling_majority_oppressed
	remove_province_modifier = half_elven_majority_primary
	remove_province_modifier = half_elven_majority_integrated
	remove_province_modifier = half_elven_majority_coexisting
	remove_province_modifier = half_elven_majority_oppressed
	remove_province_modifier = half_orcish_majority_primary
	remove_province_modifier = half_orcish_majority_integrated
	remove_province_modifier = half_orcish_majority_coexisting
	remove_province_modifier = half_orcish_majority_oppressed
	remove_province_modifier = harimari_majority_primary
	remove_province_modifier = harimari_majority_integrated
	remove_province_modifier = harimari_majority_coexisting
	remove_province_modifier = harimari_majority_oppressed
	remove_province_modifier = harpy_majority_primary
	remove_province_modifier = harpy_majority_integrated
	remove_province_modifier = harpy_majority_coexisting
	remove_province_modifier = harpy_majority_oppressed
	remove_province_modifier = hobgoblin_majority_primary
	remove_province_modifier = hobgoblin_majority_integrated
	remove_province_modifier = hobgoblin_majority_coexisting
	remove_province_modifier = hobgoblin_majority_oppressed
	remove_province_modifier = human_majority_primary
	remove_province_modifier = human_majority_integrated
	remove_province_modifier = human_majority_coexisting
	remove_province_modifier = human_majority_oppressed
	remove_province_modifier = kobold_majority_primary
	remove_province_modifier = kobold_majority_integrated
	remove_province_modifier = kobold_majority_coexisting
	remove_province_modifier = kobold_majority_oppressed
	remove_province_modifier = lizardfolk_majority_primary
	remove_province_modifier = lizardfolk_majority_integrated
	remove_province_modifier = lizardfolk_majority_coexisting
	remove_province_modifier = lizardfolk_majority_oppressed
	remove_province_modifier = ogre_majority_primary
	remove_province_modifier = ogre_majority_integrated
	remove_province_modifier = ogre_majority_coexisting
	remove_province_modifier = ogre_majority_oppressed
	remove_province_modifier = orcish_majority_primary
	remove_province_modifier = orcish_majority_integrated
	remove_province_modifier = orcish_majority_coexisting
	remove_province_modifier = orcish_majority_oppressed
	remove_province_modifier = ruinborn_majority_primary
	remove_province_modifier = ruinborn_majority_integrated
	remove_province_modifier = ruinborn_majority_coexisting
	remove_province_modifier = ruinborn_majority_oppressed
	remove_province_modifier = troll_majority_primary
	remove_province_modifier = troll_majority_integrated
	remove_province_modifier = troll_majority_coexisting
	remove_province_modifier = troll_majority_oppressed
}
