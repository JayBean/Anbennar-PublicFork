
namespace = debug

# Swap mission
country_event = {
	id = debug.1
	title = debug.1.t
	desc = debug.1.d
	picture = GOOD_WITH_MONARCH_eventPicture
	
	fire_only_once = yes
	
	is_triggered_only = yes
	
	trigger = {
		always = yes
	}
	
	option = {
		name = debug.1.a
		
		swap_non_generic_missions = yes
	}
}

# log race vars
country_event = {
        id = debug.222
        title = debug.222.t
        desc = debug.222.d
        picture = GOOD_WITH_MONARCH_eventPicture

        #fire_only_once = yes
        hidden = yes
        is_triggered_only = yes

        trigger = {
                always = yes
        }

        option = {
                name = debug.222.a
                log = "[Root.GetName]: Elven count = [Root.elven_count.GetValue]"
                log = "[Root.GetName]: Dwarven count = [Root.dwarven_count.GetValue]"
                log = "[Root.GetName]: Halfling count = [Root.halfling_count.GetValue]"
                log = "[Root.GetName]: Gnomish count = [Root.gnomish_count.GetValue]"
                log = "[Root.GetName]: Kobold count = [Root.kobold_count.GetValue]"
                log = "[Root.GetName]: Orcish count = [Root.orcish_count.GetValue]"
                log = "[Root.GetName]: Half Orcish count = [Root.half_orcish_count.GetValue]"
                log = "[Root.GetName]: Human count = [Root.human_count.GetValue]"
                log = "[Root.GetName]: Gnollish count = [Root.gnollish_count.GetValue]"
                log = "[Root.GetName]: Ruinborn count = [Root.ruinborn_count.GetValue]"
                log = "[Root.GetName]: Goblin count = [Root.goblin_count.GetValue]"
                log = "[Root.GetName]: Harpy count = [Root.harpy_count.GetValue]"
                log = "[Root.GetName]: Troll count = [Root.troll_count.GetValue]"
                log = "[Root.GetName]: Half Elven count = [Root.half_elven_count.GetValue]"
                log = "[Root.GetName]: Harimari count = [Root.harimari_count.GetValue]"
                log = "[Root.GetName]: Hobgoblin count = [Root.hobgoblin_count.GetValue]"
                log = "[Root.GetName]: Centaur count = [Root.centaur_count.GetValue]"
                log = "[Root.GetName]: Ogre count = [Root.ogre_count.GetValue]"
                log = "[Root.GetName]: Lizardfolk count = [Root.lizardfolk_count.GetValue]"
        }
}

#verify pop counts for all nations
country_event = {
	id = debug.223
	title = debug.223.t
	desc = debug.223.d
	picture = GOOD_WITH_MONARCH_eventPicture

	is_triggered_only = yes
	trigger = {
		always = yes
	}

	option = {
		name = debug.223.a

		every_country = {
			log = "verifying pop counts for [This.GetName]"

			set_variable = { which = slow_elven_count value = 0 }
			set_variable = { which = slow_dwarven_count value = 0 }
			set_variable = { which = slow_halfling_count value = 0 }
			set_variable = { which = slow_gnomish_count value = 0 }
			set_variable = { which = slow_kobold_count value = 0 }
			set_variable = { which = slow_orcish_count value = 0 }
			set_variable = { which = slow_half_orcish_count value = 0 }
			set_variable = { which = slow_human_count value = 0 }
			set_variable = { which = slow_gnollish_count value = 0 }
			set_variable = { which = slow_ruinborn_count value = 0 }
			set_variable = { which = slow_goblin_count value = 0 }
			set_variable = { which = slow_harpy_count value = 0 }
			set_variable = { which = slow_troll_count value = 0 }
			set_variable = { which = slow_half_elven_count value = 0 }
			set_variable = { which = slow_harimari_count value = 0 }
			set_variable = { which = slow_hobgoblin_count value = 0 }
			set_variable = { which = slow_centaur_count value = 0 }
			set_variable = { which = slow_ogre_count value = 0 }
			set_variable = { which = slow_lizardfolk_count value = 0 }

			every_owned_province = {

				if = {
					limit = { has_any_elven_pop_trigger = yes }
					owner = { change_variable = { which = slow_elven_count value = 1 } }
				}

				if = {
					limit = { has_any_dwarven_pop_trigger = yes }
					owner = { change_variable = { which = slow_dwarven_count value = 1 } }
				}

				if = {
					limit = { has_any_halfling_pop_trigger = yes }
					owner = { change_variable = { which = slow_halfling_count value = 1 } }
				}

				if = {
					limit = { has_any_gnomish_pop_trigger = yes }
					owner = { change_variable = { which = slow_gnomish_count value = 1 } }
				}

				if = {
					limit = { has_any_kobold_pop_trigger = yes }
					owner = { change_variable = { which = slow_kobold_count value = 1 } }
				}

				if = {
					limit = { has_any_orcish_pop_trigger = yes }
					owner = { change_variable = { which = slow_orcish_count value = 1 } }
				}

				if = {
					limit = { has_any_half_orcish_pop_trigger = yes }
					owner = { change_variable = { which = slow_half_orcish_count value = 1 } }
				}

				if = {
					limit = { has_any_human_pop_trigger = yes }
					owner = { change_variable = { which = slow_human_count value = 1 } }
				}

				if = {
					limit = { has_any_gnollish_pop_trigger = yes }
					owner = { change_variable = { which = slow_gnollish_count value = 1 } }
				}

				if = {
					limit = { has_any_ruinborn_pop_trigger = yes }
					owner = { change_variable = { which = slow_ruinborn_count value = 1 } }
				}

				if = {
					limit = { has_any_goblin_pop_trigger = yes }
					owner = { change_variable = { which = slow_goblin_count value = 1 } }
				}

				if = {
					limit = { has_any_harpy_pop_trigger = yes }
					owner = { change_variable = { which = slow_harpy_count value = 1 } }
				}

				if = {
					limit = { has_any_troll_pop_trigger = yes }
					owner = { change_variable = { which = slow_troll_count value = 1 } }
				}

				if = {
					limit = { has_any_half_elven_pop_trigger = yes }
					owner = { change_variable = { which = slow_half_elven_count value = 1 } }
				}

				if = {
					limit = { has_any_harimari_pop_trigger = yes }
					owner = { change_variable = { which = slow_harimari_count value = 1 } }
				}

				if = {
					limit = { has_any_hobgoblin_pop_trigger = yes }
					owner = { change_variable = { which = slow_hobgoblin_count value = 1 } }
				}

				if = {
					limit = { has_any_centaur_pop_trigger = yes }
					owner = { change_variable = { which = slow_centaur_count value = 1 } }
				}

				if = {
					limit = { has_any_ogre_pop_trigger = yes }
					owner = { change_variable = { which = slow_ogre_count value = 1 } }
				}

				if = {
					limit = { has_any_lizardfolk_pop_trigger = yes }
					owner = { change_variable = { which = slow_lizardfolk_count value = 1 } }
				}

			}

			# verify counts are the same
			if = {
				limit = { check_variable = { which = elven_count which = slow_elven_count } } # elven_count >= slow_elven_count
				change_variable = { which = slow_elven_count value = 1 }
				if = {
					limit = { NOT = { check_variable = { which = elven_count which = slow_elven_count } } }
					# !(elven_count >= slow_elven_count + 1) aka elven_count < slow_elven_count + 1
					# therefore elven_count == slow_elven_count, all fine
				}
				else = {
					log = "elven count too large for [This.GetName]: correct = [This.slow_elven_count.GetValue], current = [This.elven_count.GetValue]"
				}
			}
			else = {
				log = "elven count too small for [This.GetName]: correct = [This.slow_elven_count.GetValue], current = [This.elven_count.GetValue]"
			}

			if = {
				limit = { check_variable = { which = dwarven_count which = slow_dwarven_count } } # dwarven_count >= slow_dwarven_count
				change_variable = { which = slow_dwarven_count value = 1 }
				if = {
					limit = { NOT = { check_variable = { which = dwarven_count which = slow_dwarven_count } } }
					# !(dwarven_count >= slow_dwarven_count + 1) aka dwarven_count < slow_dwarven_count + 1
					# therefore dwarven_count == slow_dwarven_count, all fine
				}
				else = {
					log = "dwarven count too large for [This.GetName]: correct = [This.slow_dwarven_count.GetValue], current = [This.dwarven_count.GetValue]"
				}
			}
			else = {
				log = "dwarven count too small for [This.GetName]: correct = [This.slow_dwarven_count.GetValue], current = [This.dwarven_count.GetValue]"
			}

			if = {
				limit = { check_variable = { which = halfling_count which = slow_halfling_count } } # halfling_count >= slow_halfling_count
				change_variable = { which = slow_halfling_count value = 1 }
				if = {
					limit = { NOT = { check_variable = { which = halfling_count which = slow_halfling_count } } }
					# !(halfling_count >= slow_halfling_count + 1) aka halfling_count < slow_halfling_count + 1
					# therefore halfling_count == slow_halfling_count, all fine
				}
				else = {
					log = "halfling count too large for [This.GetName]: correct = [This.slow_halfling_count.GetValue], current = [This.halfling_count.GetValue]"
				}
			}
			else = {
				log = "halfling count too small for [This.GetName]: correct = [This.slow_halfling_count.GetValue], current = [This.halfling_count.GetValue]"
			}

			if = {
				limit = { check_variable = { which = gnomish_count which = slow_gnomish_count } } # gnomish_count >= slow_gnomish_count
				change_variable = { which = slow_gnomish_count value = 1 }
				if = {
					limit = { NOT = { check_variable = { which = gnomish_count which = slow_gnomish_count } } }
					# !(gnomish_count >= slow_gnomish_count + 1) aka gnomish_count < slow_gnomish_count + 1
					# therefore gnomish_count == slow_gnomish_count, all fine
				}
				else = {
					log = "gnomish count too large for [This.GetName]: correct = [This.slow_gnomish_count.GetValue], current = [This.gnomish_count.GetValue]"
				}
			}
			else = {
				log = "gnomish count too small for [This.GetName]: correct = [This.slow_gnomish_count.GetValue], current = [This.gnomish_count.GetValue]"
			}

			if = {
				limit = { check_variable = { which = kobold_count which = slow_kobold_count } } # kobold_count >= slow_kobold_count
				change_variable = { which = slow_kobold_count value = 1 }
				if = {
					limit = { NOT = { check_variable = { which = kobold_count which = slow_kobold_count } } }
					# !(kobold_count >= slow_kobold_count + 1) aka kobold_count < slow_kobold_count + 1
					# therefore kobold_count == slow_kobold_count, all fine
				}
				else = {
					log = "kobold count too large for [This.GetName]: correct = [This.slow_kobold_count.GetValue], current = [This.kobold_count.GetValue]"
				}
			}
			else = {
				log = "kobold count too small for [This.GetName]: correct = [This.slow_kobold_count.GetValue], current = [This.kobold_count.GetValue]"
			}

			if = {
				limit = { check_variable = { which = orcish_count which = slow_orcish_count } } # orcish_count >= slow_orcish_count
				change_variable = { which = slow_orcish_count value = 1 }
				if = {
					limit = { NOT = { check_variable = { which = orcish_count which = slow_orcish_count } } }
					# !(orcish_count >= slow_orcish_count + 1) aka orcish_count < slow_orcish_count + 1
					# therefore orcish_count == slow_orcish_count, all fine
				}
				else = {
					log = "orcish count too large for [This.GetName]: correct = [This.slow_orcish_count.GetValue], current = [This.orcish_count.GetValue]"
				}
			}
			else = {
				log = "orcish count too small for [This.GetName]: correct = [This.slow_orcish_count.GetValue], current = [This.orcish_count.GetValue]"
			}

			if = {
				limit = { check_variable = { which = half_orcish_count which = slow_half_orcish_count } } # half_orcish_count >= slow_half_orcish_count
				change_variable = { which = slow_half_orcish_count value = 1 }
				if = {
					limit = { NOT = { check_variable = { which = half_orcish_count which = slow_half_orcish_count } } }
					# !(half_orcish_count >= slow_half_orcish_count + 1) aka half_orcish_count < slow_half_orcish_count + 1
					# therefore half_orcish_count == slow_half_orcish_count, all fine
				}
				else = {
					log = "half_orcish count too large for [This.GetName]: correct = [This.slow_half_orcish_count.GetValue], current = [This.half_orcish_count.GetValue]"
				}
			}
			else = {
				log = "half_orcish count too small for [This.GetName]: correct = [This.slow_half_orcish_count.GetValue], current = [This.half_orcish_count.GetValue]"
			}

			if = {
				limit = { check_variable = { which = human_count which = slow_human_count } } # human_count >= slow_human_count
				change_variable = { which = slow_human_count value = 1 }
				if = {
					limit = { NOT = { check_variable = { which = human_count which = slow_human_count } } }
					# !(human_count >= slow_human_count + 1) aka human_count < slow_human_count + 1
					# therefore human_count == slow_human_count, all fine
				}
				else = {
					log = "human count too large for [This.GetName]: correct = [This.slow_human_count.GetValue], current = [This.human_count.GetValue]"
				}
			}
			else = {
				log = "human count too small for [This.GetName]: correct = [This.slow_human_count.GetValue], current = [This.human_count.GetValue]"
			}

			if = {
				limit = { check_variable = { which = gnollish_count which = slow_gnollish_count } } # gnollish_count >= slow_gnollish_count
				change_variable = { which = slow_gnollish_count value = 1 }
				if = {
					limit = { NOT = { check_variable = { which = gnollish_count which = slow_gnollish_count } } }
					# !(gnollish_count >= slow_gnollish_count + 1) aka gnollish_count < slow_gnollish_count + 1
					# therefore gnollish_count == slow_gnollish_count, all fine
				}
				else = {
					log = "gnollish count too large for [This.GetName]: correct = [This.slow_gnollish_count.GetValue], current = [This.gnollish_count.GetValue]"
				}
			}
			else = {
				log = "gnollish count too small for [This.GetName]: correct = [This.slow_gnollish_count.GetValue], current = [This.gnollish_count.GetValue]"
			}

			if = {
				limit = { check_variable = { which = ruinborn_count which = slow_ruinborn_count } } # ruinborn_count >= slow_ruinborn_count
				change_variable = { which = slow_ruinborn_count value = 1 }
				if = {
					limit = { NOT = { check_variable = { which = ruinborn_count which = slow_ruinborn_count } } }
					# !(ruinborn_count >= slow_ruinborn_count + 1) aka ruinborn_count < slow_ruinborn_count + 1
					# therefore ruinborn_count == slow_ruinborn_count, all fine
				}
				else = {
					log = "ruinborn count too large for [This.GetName]: correct = [This.slow_ruinborn_count.GetValue], current = [This.ruinborn_count.GetValue]"
				}
			}
			else = {
				log = "ruinborn count too small for [This.GetName]: correct = [This.slow_ruinborn_count.GetValue], current = [This.ruinborn_count.GetValue]"
			}

			if = {
				limit = { check_variable = { which = goblin_count which = slow_goblin_count } } # goblin_count >= slow_goblin_count
				change_variable = { which = slow_goblin_count value = 1 }
				if = {
					limit = { NOT = { check_variable = { which = goblin_count which = slow_goblin_count } } }
					# !(goblin_count >= slow_goblin_count + 1) aka goblin_count < slow_goblin_count + 1
					# therefore goblin_count == slow_goblin_count, all fine
				}
				else = {
					log = "goblin count too large for [This.GetName]: correct = [This.slow_goblin_count.GetValue], current = [This.goblin_count.GetValue]"
				}
			}
			else = {
				log = "goblin count too small for [This.GetName]: correct = [This.slow_goblin_count.GetValue], current = [This.goblin_count.GetValue]"
			}

			if = {
				limit = { check_variable = { which = harpy_count which = slow_harpy_count } } # harpy_count >= slow_harpy_count
				change_variable = { which = slow_harpy_count value = 1 }
				if = {
					limit = { NOT = { check_variable = { which = harpy_count which = slow_harpy_count } } }
					# !(harpy_count >= slow_harpy_count + 1) aka harpy_count < slow_harpy_count + 1
					# therefore harpy_count == slow_harpy_count, all fine
				}
				else = {
					log = "harpy count too large for [This.GetName]: correct = [This.slow_harpy_count.GetValue], current = [This.harpy_count.GetValue]"
				}
			}
			else = {
				log = "harpy count too small for [This.GetName]: correct = [This.slow_harpy_count.GetValue], current = [This.harpy_count.GetValue]"
			}

			if = {
				limit = { check_variable = { which = troll_count which = slow_troll_count } } # troll_count >= slow_troll_count
				change_variable = { which = slow_troll_count value = 1 }
				if = {
					limit = { NOT = { check_variable = { which = troll_count which = slow_troll_count } } }
					# !(troll_count >= slow_troll_count + 1) aka troll_count < slow_troll_count + 1
					# therefore troll_count == slow_troll_count, all fine
				}
				else = {
					log = "troll count too large for [This.GetName]: correct = [This.slow_troll_count.GetValue], current = [This.troll_count.GetValue]"
				}
			}
			else = {
				log = "troll count too small for [This.GetName]: correct = [This.slow_troll_count.GetValue], current = [This.troll_count.GetValue]"
			}

			if = {
				limit = { check_variable = { which = half_elven_count which = slow_half_elven_count } } # half_elven_count >= slow_half_elven_count
				change_variable = { which = slow_half_elven_count value = 1 }
				if = {
					limit = { NOT = { check_variable = { which = half_elven_count which = slow_half_elven_count } } }
					# !(half_elven_count >= slow_half_elven_count + 1) aka half_elven_count < slow_half_elven_count + 1
					# therefore half_elven_count == slow_half_elven_count, all fine
				}
				else = {
					log = "half_elven count too large for [This.GetName]: correct = [This.slow_half_elven_count.GetValue], current = [This.half_elven_count.GetValue]"
				}
			}
			else = {
				log = "half_elven count too small for [This.GetName]: correct = [This.slow_half_elven_count.GetValue], current = [This.half_elven_count.GetValue]"
			}

			if = {
				limit = { check_variable = { which = harimari_count which = slow_harimari_count } } # harimari_count >= slow_harimari_count
				change_variable = { which = slow_harimari_count value = 1 }
				if = {
					limit = { NOT = { check_variable = { which = harimari_count which = slow_harimari_count } } }
					# !(harimari_count >= slow_harimari_count + 1) aka harimari_count < slow_harimari_count + 1
					# therefore harimari_count == slow_harimari_count, all fine
				}
				else = {
					log = "harimari count too large for [This.GetName]: correct = [This.slow_harimari_count.GetValue], current = [This.harimari_count.GetValue]"
				}
			}
			else = {
				log = "harimari count too small for [This.GetName]: correct = [This.slow_harimari_count.GetValue], current = [This.harimari_count.GetValue]"
			}

			if = {
				limit = { check_variable = { which = hobgoblin_count which = slow_hobgoblin_count } } # hobgoblin_count >= slow_hobgoblin_count
				change_variable = { which = slow_hobgoblin_count value = 1 }
				if = {
					limit = { NOT = { check_variable = { which = hobgoblin_count which = slow_hobgoblin_count } } }
					# !(hobgoblin_count >= slow_hobgoblin_count + 1) aka hobgoblin_count < slow_hobgoblin_count + 1
					# therefore hobgoblin_count == slow_hobgoblin_count, all fine
				}
				else = {
					log = "hobgoblin count too large for [This.GetName]: correct = [This.slow_hobgoblin_count.GetValue], current = [This.hobgoblin_count.GetValue]"
				}
			}
			else = {
				log = "hobgoblin count too small for [This.GetName]: correct = [This.slow_hobgoblin_count.GetValue], current = [This.hobgoblin_count.GetValue]"
			}

			if = {
				limit = { check_variable = { which = centaur_count which = slow_centaur_count } } # centaur_count >= slow_centaur_count
				change_variable = { which = slow_centaur_count value = 1 }
				if = {
					limit = { NOT = { check_variable = { which = centaur_count which = slow_centaur_count } } }
					# !(centaur_count >= slow_centaur_count + 1) aka centaur_count < slow_centaur_count + 1
					# therefore centaur_count == slow_centaur_count, all fine
				}
				else = {
					log = "centaur count too large for [This.GetName]: correct = [This.slow_centaur_count.GetValue], current = [This.centaur_count.GetValue]"
				}
			}
			else = {
				log = "centaur count too small for [This.GetName]: correct = [This.slow_centaur_count.GetValue], current = [This.centaur_count.GetValue]"
			}

			if = {
				limit = { check_variable = { which = ogre_count which = slow_ogre_count } } # ogre_count >= slow_ogre_count
				change_variable = { which = slow_ogre_count value = 1 }
				if = {
					limit = { NOT = { check_variable = { which = ogre_count which = slow_ogre_count } } }
					# !(ogre_count >= slow_ogre_count + 1) aka ogre_count < slow_ogre_count + 1
					# therefore ogre_count == slow_ogre_count, all fine
				}
				else = {
					log = "ogre count too large for [This.GetName]: correct = [This.slow_ogre_count.GetValue], current = [This.ogre_count.GetValue]"
				}
			}
			else = {
				log = "ogre count too small for [This.GetName]: correct = [This.slow_ogre_count.GetValue], current = [This.ogre_count.GetValue]"
			}

			if = {
				limit = { check_variable = { which = lizardfolk_count which = slow_lizardfolk_count } } # lizardfolk_count >= slow_lizardfolk_count
				change_variable = { which = slow_lizardfolk_count value = 1 }
				if = {
					limit = { NOT = { check_variable = { which = lizardfolk_count which = slow_lizardfolk_count } } }
					# !(lizardfolk_count >= slow_lizardfolk_count + 1) aka lizardfolk_count < slow_lizardfolk_count + 1
					# therefore lizardfolk_count == slow_lizardfolk_count, all fine
				}
				else = {
					log = "lizardfolk count too large for [This.GetName]: correct = [This.slow_lizardfolk_count.GetValue], current = [This.lizardfolk_count.GetValue]"
				}
			}
			else = {
				log = "lizardfolk count too small for [This.GetName]: correct = [This.slow_lizardfolk_count.GetValue], current = [This.lizardfolk_count.GetValue]"
			}
		}


	}
}

#detect unmatching tolerances (best used for determining if starting tolerances for minorities are incorrect)
country_event = {
	id = debug.9999
	title = debug.9999.t
	desc = debug.9999.d
	picture = GOOD_WITH_MONARCH_eventPicture
	
	is_triggered_only = yes
	
	trigger = {
		always = yes
	}
	
	option = {
		name = debug.9999.a
	
		every_province = {
			limit = {
				is_city = yes
				OR = { 
					#Elven
					has_unmatching_race_tolerance_trigger = { race = elven }

					#Dwarven
					has_unmatching_race_tolerance_trigger = { race = dwarven }

					#Halfling
					has_unmatching_race_tolerance_trigger = { race = halfling }

					#Gnomish
					has_unmatching_race_tolerance_trigger = { race = gnomish }

					#Kobold
					has_unmatching_race_tolerance_trigger = { race = kobold }

					#Orcish
					has_unmatching_race_tolerance_trigger = { race = orcish }

					#Half-Orcish
					has_unmatching_race_tolerance_trigger = { race = half_orcish }

					#Human
					has_unmatching_race_tolerance_trigger = { race = human }

					#Gnollish
					has_unmatching_race_tolerance_trigger = { race = gnollish }

					#Ruinborn
					has_unmatching_race_tolerance_trigger = { race = ruinborn }

					#Goblin
					has_unmatching_race_tolerance_trigger = { race = goblin }

					#Harpy
					has_unmatching_race_tolerance_trigger = { race = harpy }

					#Troll
					has_unmatching_race_tolerance_trigger = { race = troll }

					#Half-elven
					has_unmatching_race_tolerance_trigger = { race = half_elven }

					#Harimari
					has_unmatching_race_tolerance_trigger = { race = harimari }

					#Hobgoblin
					has_unmatching_race_tolerance_trigger = { race = hobgoblin }

					#Centaur
					has_unmatching_race_tolerance_trigger = { race = centaur }

					#Ogre
					has_unmatching_race_tolerance_trigger = { race = ogre }

					#Lizardfolk
					has_unmatching_race_tolerance_trigger = { race = lizardfolk }

				}
			}
			log = "Unmatching tolerance for [This.GetName], owned by [This.Owner.GetName]"
		}
	
	}
}
#Anbennar; max skill in all magic schools
# country_event = { #this is duped
# 	id = debug.2
# 	title = debug.2.t
# 	desc = debug.2.d
# 	picture = GOOD_WITH_MONARCH_eventPicture
	
# 	fire_only_once = yes
	
# 	is_triggered_only = yes
	
# 	trigger = {
# 		always = yes
# 	}
	
# 	option = {
# 		name = debug.1.a
		
# 		set_ruler_flag = abjuration_1
# 		set_ruler_flag = abjuration_2
# 		set_ruler_flag = abjuration_3
# 		set_ruler_flag = conjuration_1
# 		set_ruler_flag = conjuration_2
# 		set_ruler_flag = conjuration_3
# 		set_ruler_flag = divination_1
# 		set_ruler_flag = divination_2
# 		set_ruler_flag = divination_3
# 		set_ruler_flag = enchantment_1
# 		set_ruler_flag = enchantment_2
# 		set_ruler_flag = enchantment_3
# 		set_ruler_flag = evocation_1
# 		set_ruler_flag = evocation_2
# 		set_ruler_flag = evocation_3
# 		set_ruler_flag = illusion_1
# 		set_ruler_flag = illusion_2
# 		set_ruler_flag = illusion_3
# 		set_ruler_flag = necromancy_1
# 		set_ruler_flag = necromancy_2
# 		set_ruler_flag = necromancy_3
# 		set_ruler_flag = transmutation_1
# 		set_ruler_flag = transmutation_2
# 		set_ruler_flag = transmutation_3
# 	}
# }

#Anbennar; legendary skill in all magic schools
country_event = {
	id = debug.2
	title = debug.2.t
	desc = debug.2.d
	picture = GOOD_WITH_MONARCH_eventPicture
	
	fire_only_once = yes
	
	is_triggered_only = yes
	
	trigger = {
		always = yes
	}
	
	option = {
		name = debug.1.a
		
		set_ruler_flag = abjuration_1
		set_ruler_flag = abjuration_2
		set_ruler_flag = abjuration_3
		set_ruler_flag = conjuration_1
		set_ruler_flag = conjuration_2
		set_ruler_flag = conjuration_3
		set_ruler_flag = divination_1
		set_ruler_flag = divination_2
		set_ruler_flag = divination_3
		set_ruler_flag = enchantment_1
		set_ruler_flag = enchantment_2
		set_ruler_flag = enchantment_3
		set_ruler_flag = evocation_1
		set_ruler_flag = evocation_2
		set_ruler_flag = evocation_3
		set_ruler_flag = illusion_1
		set_ruler_flag = illusion_2
		set_ruler_flag = illusion_3
		set_ruler_flag = necromancy_1
		set_ruler_flag = necromancy_2
		set_ruler_flag = necromancy_3
		set_ruler_flag = transmutation_1
		set_ruler_flag = transmutation_2
		set_ruler_flag = transmutation_3
	}
}

#Anbennar; renowned skill in all magic schools
country_event = {
	id = debug.3
	title = debug.3.t
	desc = debug.3.d
	picture = GOOD_WITH_MONARCH_eventPicture
	
	fire_only_once = yes
	
	is_triggered_only = yes
	
	trigger = {
		always = yes
	}
	
	option = {
		name = debug.1.a
		
		set_ruler_flag = abjuration_1
		set_ruler_flag = abjuration_2
		clr_ruler_flag = abjuration_3
		set_ruler_flag = conjuration_1
		set_ruler_flag = conjuration_2
		clr_ruler_flag = conjuration_3
		set_ruler_flag = divination_1
		set_ruler_flag = divination_2
		clr_ruler_flag = divination_3
		set_ruler_flag = enchantment_1
		set_ruler_flag = enchantment_2
		clr_ruler_flag = enchantment_3
		set_ruler_flag = evocation_1
		set_ruler_flag = evocation_2
		clr_ruler_flag = evocation_3
		set_ruler_flag = illusion_1
		set_ruler_flag = illusion_2
		clr_ruler_flag = illusion_3
		set_ruler_flag = necromancy_1
		set_ruler_flag = necromancy_2
		clr_ruler_flag = necromancy_3
		set_ruler_flag = transmutation_1
		set_ruler_flag = transmutation_2
		clr_ruler_flag = transmutation_3
	}
}

#Anbennar; talented skill in all magic schools
country_event = {
	id = debug.4
	title = debug.4.t
	desc = debug.4.d
	picture = GOOD_WITH_MONARCH_eventPicture
	
	fire_only_once = yes
	
	is_triggered_only = yes
	
	trigger = {
		always = yes
	}
	
	option = {
		name = debug.1.a
		
		set_ruler_flag = abjuration_1
		clr_ruler_flag = abjuration_2
		clr_ruler_flag = abjuration_3
		set_ruler_flag = conjuration_1
		clr_ruler_flag = conjuration_2
		clr_ruler_flag = conjuration_3
		set_ruler_flag = divination_1
		clr_ruler_flag = divination_2
		clr_ruler_flag = divination_3
		set_ruler_flag = enchantment_1
		clr_ruler_flag = enchantment_2
		clr_ruler_flag = enchantment_3
		set_ruler_flag = evocation_1
		clr_ruler_flag = evocation_2
		clr_ruler_flag = evocation_3
		set_ruler_flag = illusion_1
		clr_ruler_flag = illusion_2
		clr_ruler_flag = illusion_3
		set_ruler_flag = necromancy_1
		clr_ruler_flag = necromancy_2
		clr_ruler_flag = necromancy_3
		set_ruler_flag = transmutation_1
		clr_ruler_flag = transmutation_2
		clr_ruler_flag = transmutation_3
	}
}
